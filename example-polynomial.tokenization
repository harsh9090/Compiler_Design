Comment: -  ====== struct declarations ====== // 
class class  
class class POLYNOMIAL  
class class POLYNOMIAL {  
class class POLYNOMIAL { public  
class class POLYNOMIAL { public function  
class class POLYNOMIAL { public function evaluate  
class class POLYNOMIAL { public function evaluate :  
class class POLYNOMIAL { public function evaluate : (  
class class POLYNOMIAL { public function evaluate : ( x  
class class POLYNOMIAL { public function evaluate : ( x :  
class class POLYNOMIAL { public function evaluate : ( x : integer  
class class POLYNOMIAL { public function evaluate : ( x : integer )  
class class POLYNOMIAL { public function evaluate : ( x : integer ) =>  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ;  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; }  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ;  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL {  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a :  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ;  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b :  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ;  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor :  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : (  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A :  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer ,  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B :  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer )  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ;  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate :  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : (  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x :  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer )  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) =>  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ;  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; }  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ;  
Comment: -  ====== member function implementations ====== //   
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL ::  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate (  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x :  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer )  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) =>  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer  
Comment: -  2.1, 2.2 
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { {  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return (  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 )  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ;  
Comment: -  2.3 
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } }  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR ::  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor (  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A :  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer ,  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B :  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer )  
Comment: -  2.1, 2.2 
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { {  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self .  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a =  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ;  
Comment: -  3.1, 5.3 
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self .  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b =  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ;  
Comment: -  3.1, 5.3 
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } }  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR ::  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate (  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x :  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer )  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) =>  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer  
Comment: -  2.1, 2.2 
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { {  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result :  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ;  
Comment: -  1.1 
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result =  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ;  
Comment: -  3.1 
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result =  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a *  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x +  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ;  
Comment: -  3.1, 5.1 
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return (  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result )  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ;  
Comment: -  2.3 
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } }  
Comment: -  ====== main ====== // 
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main (  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( )  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) =>  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void  
Comment: -  2.1, 2.2 
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { {  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 :  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ]  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ;  
Comment: -  1.3, 2.1, 2.2, 2.4 
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 :  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ;  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 :  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR (  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 ,  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 )  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ;  
Comment: -   localvar f2: QUADRATIC(-2, 1, 0);                         // 1.3, 2.1, 2.2, 2.4 
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter :  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ;  
Comment: -  1.1 
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter =  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter = 1  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter = 1 ;  
Comment: -  3.1 
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter = 1 ; f1 f1  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter = 1 ; f1 f1 [  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter = 1 ; f1 f1 [ 1  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter = 1 ; f1 f1 [ 1 ]  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter = 1 ; f1 f1 [ 1 ] =  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter = 1 ; f1 f1 [ 1 ] = build  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter = 1 ; f1 f1 [ 1 ] = build (  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter = 1 ; f1 f1 [ 1 ] = build ( 2  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter = 1 ; f1 f1 [ 1 ] = build ( 2 ,  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter = 1 ; f1 f1 [ 1 ] = build ( 2 , 2  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter = 1 ; f1 f1 [ 1 ] = build ( 2 , 2 )  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter = 1 ; f1 f1 [ 1 ] = build ( 2 , 2 ) ;  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter = 1 ; f1 f1 [ 1 ] = build ( 2 , 2 ) ; f1  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter = 1 ; f1 f1 [ 1 ] = build ( 2 , 2 ) ; f1 [  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter = 1 ; f1 f1 [ 1 ] = build ( 2 , 2 ) ; f1 [ 2  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter = 1 ; f1 f1 [ 1 ] = build ( 2 , 2 ) ; f1 [ 2 ]  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter = 1 ; f1 f1 [ 1 ] = build ( 2 , 2 ) ; f1 [ 2 ] =  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter = 1 ; f1 f1 [ 1 ] = build ( 2 , 2 ) ; f1 [ 2 ] = build  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter = 1 ; f1 f1 [ 1 ] = build ( 2 , 2 ) ; f1 [ 2 ] = build (  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter = 1 ; f1 f1 [ 1 ] = build ( 2 , 2 ) ; f1 [ 2 ] = build ( 4  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter = 1 ; f1 f1 [ 1 ] = build ( 2 , 2 ) ; f1 [ 2 ] = build ( 4 ,  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter = 1 ; f1 f1 [ 1 ] = build ( 2 , 2 ) ; f1 [ 2 ] = build ( 4 , 4  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter = 1 ; f1 f1 [ 1 ] = build ( 2 , 2 ) ; f1 [ 2 ] = build ( 4 , 4 )  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter = 1 ; f1 f1 [ 1 ] = build ( 2 , 2 ) ; f1 [ 2 ] = build ( 4 , 4 ) ;  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter = 1 ; f1 f1 [ 1 ] = build ( 2 , 2 ) ; f1 [ 2 ] = build ( 4 , 4 ) ; f3  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter = 1 ; f1 f1 [ 1 ] = build ( 2 , 2 ) ; f1 [ 2 ] = build ( 4 , 4 ) ; f3 =  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter = 1 ; f1 f1 [ 1 ] = build ( 2 , 2 ) ; f1 [ 2 ] = build ( 4 , 4 ) ; f3 = build  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter = 1 ; f1 f1 [ 1 ] = build ( 2 , 2 ) ; f1 [ 2 ] = build ( 4 , 4 ) ; f3 = build (  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter = 1 ; f1 f1 [ 1 ] = build ( 2 , 2 ) ; f1 [ 2 ] = build ( 4 , 4 ) ; f3 = build ( 3  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter = 1 ; f1 f1 [ 1 ] = build ( 2 , 2 ) ; f1 [ 2 ] = build ( 4 , 4 ) ; f3 = build ( 3 ,  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter = 1 ; f1 f1 [ 1 ] = build ( 2 , 2 ) ; f1 [ 2 ] = build ( 4 , 4 ) ; f3 = build ( 3 , 3  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter = 1 ; f1 f1 [ 1 ] = build ( 2 , 2 ) ; f1 [ 2 ] = build ( 4 , 4 ) ; f3 = build ( 3 , 3 )  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter = 1 ; f1 f1 [ 1 ] = build ( 2 , 2 ) ; f1 [ 2 ] = build ( 4 , 4 ) ; f3 = build ( 3 , 3 ) ;  
Comment: -   f2 = build(3,4); 
Comment: -  write(f2.b); 
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter = 1 ; f1 f1 [ 1 ] = build ( 2 , 2 ) ; f1 [ 2 ] = build ( 4 , 4 ) ; f3 = build ( 3 , 3 ) ;  write(f2.b); while while  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter = 1 ; f1 f1 [ 1 ] = build ( 2 , 2 ) ; f1 [ 2 ] = build ( 4 , 4 ) ; f3 = build ( 3 , 3 ) ;  write(f2.b); while while (  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter = 1 ; f1 f1 [ 1 ] = build ( 2 , 2 ) ; f1 [ 2 ] = build ( 4 , 4 ) ; f3 = build ( 3 , 3 ) ;  write(f2.b); while while ( counter  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter = 1 ; f1 f1 [ 1 ] = build ( 2 , 2 ) ; f1 [ 2 ] = build ( 4 , 4 ) ; f3 = build ( 3 , 3 ) ;  write(f2.b); while while ( counter <=  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter = 1 ; f1 f1 [ 1 ] = build ( 2 , 2 ) ; f1 [ 2 ] = build ( 4 , 4 ) ; f3 = build ( 3 , 3 ) ;  write(f2.b); while while ( counter <= 10  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter = 1 ; f1 f1 [ 1 ] = build ( 2 , 2 ) ; f1 [ 2 ] = build ( 4 , 4 ) ; f3 = build ( 3 , 3 ) ;  write(f2.b); while while ( counter <= 10 )  
Comment: -  3.3, 5.1  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter = 1 ; f1 f1 [ 1 ] = build ( 2 , 2 ) ; f1 [ 2 ] = build ( 4 , 4 ) ; f3 = build ( 3 , 3 ) ;  write(f2.b); while while ( counter <= 10 ) { {  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter = 1 ; f1 f1 [ 1 ] = build ( 2 , 2 ) ; f1 [ 2 ] = build ( 4 , 4 ) ; f3 = build ( 3 , 3 ) ;  write(f2.b); while while ( counter <= 10 ) { { write  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter = 1 ; f1 f1 [ 1 ] = build ( 2 , 2 ) ; f1 [ 2 ] = build ( 4 , 4 ) ; f3 = build ( 3 , 3 ) ;  write(f2.b); while while ( counter <= 10 ) { { write (  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter = 1 ; f1 f1 [ 1 ] = build ( 2 , 2 ) ; f1 [ 2 ] = build ( 4 , 4 ) ; f3 = build ( 3 , 3 ) ;  write(f2.b); while while ( counter <= 10 ) { { write ( counter  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter = 1 ; f1 f1 [ 1 ] = build ( 2 , 2 ) ; f1 [ 2 ] = build ( 4 , 4 ) ; f3 = build ( 3 , 3 ) ;  write(f2.b); while while ( counter <= 10 ) { { write ( counter )  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter = 1 ; f1 f1 [ 1 ] = build ( 2 , 2 ) ; f1 [ 2 ] = build ( 4 , 4 ) ; f3 = build ( 3 , 3 ) ;  write(f2.b); while while ( counter <= 10 ) { { write ( counter ) ;  
Comment: -  3.4 
Comment: -    write(f1.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4 
Comment: -    write(f2.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4 
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter = 1 ; f1 f1 [ 1 ] = build ( 2 , 2 ) ; f1 [ 2 ] = build ( 4 , 4 ) ; f3 = build ( 3 , 3 ) ;  write(f2.b); while while ( counter <= 10 ) { { write ( counter ) ;    write(f1.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4    write(f2.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4 counter counter  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter = 1 ; f1 f1 [ 1 ] = build ( 2 , 2 ) ; f1 [ 2 ] = build ( 4 , 4 ) ; f3 = build ( 3 , 3 ) ;  write(f2.b); while while ( counter <= 10 ) { { write ( counter ) ;    write(f1.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4    write(f2.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4 counter counter =  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter = 1 ; f1 f1 [ 1 ] = build ( 2 , 2 ) ; f1 [ 2 ] = build ( 4 , 4 ) ; f3 = build ( 3 , 3 ) ;  write(f2.b); while while ( counter <= 10 ) { { write ( counter ) ;    write(f1.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4    write(f2.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4 counter counter = counter  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter = 1 ; f1 f1 [ 1 ] = build ( 2 , 2 ) ; f1 [ 2 ] = build ( 4 , 4 ) ; f3 = build ( 3 , 3 ) ;  write(f2.b); while while ( counter <= 10 ) { { write ( counter ) ;    write(f1.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4    write(f2.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4 counter counter = counter +  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter = 1 ; f1 f1 [ 1 ] = build ( 2 , 2 ) ; f1 [ 2 ] = build ( 4 , 4 ) ; f3 = build ( 3 , 3 ) ;  write(f2.b); while while ( counter <= 10 ) { { write ( counter ) ;    write(f1.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4    write(f2.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4 counter counter = counter + 1  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter = 1 ; f1 f1 [ 1 ] = build ( 2 , 2 ) ; f1 [ 2 ] = build ( 4 , 4 ) ; f3 = build ( 3 , 3 ) ;  write(f2.b); while while ( counter <= 10 ) { { write ( counter ) ;    write(f1.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4    write(f2.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4 counter counter = counter + 1 ;  
Comment: -  3.1 
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter = 1 ; f1 f1 [ 1 ] = build ( 2 , 2 ) ; f1 [ 2 ] = build ( 4 , 4 ) ; f3 = build ( 3 , 3 ) ;  write(f2.b); while while ( counter <= 10 ) { { write ( counter ) ;    write(f1.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4    write(f2.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4 counter counter = counter + 1 ; } }  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter = 1 ; f1 f1 [ 1 ] = build ( 2 , 2 ) ; f1 [ 2 ] = build ( 4 , 4 ) ; f3 = build ( 3 , 3 ) ;  write(f2.b); while while ( counter <= 10 ) { { write ( counter ) ;    write(f1.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4    write(f2.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4 counter counter = counter + 1 ; } } ;  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter = 1 ; f1 f1 [ 1 ] = build ( 2 , 2 ) ; f1 [ 2 ] = build ( 4 , 4 ) ; f3 = build ( 3 , 3 ) ;  write(f2.b); while while ( counter <= 10 ) { { write ( counter ) ;    write(f1.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4    write(f2.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4 counter counter = counter + 1 ; } } ; write  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter = 1 ; f1 f1 [ 1 ] = build ( 2 , 2 ) ; f1 [ 2 ] = build ( 4 , 4 ) ; f3 = build ( 3 , 3 ) ;  write(f2.b); while while ( counter <= 10 ) { { write ( counter ) ;    write(f1.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4    write(f2.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4 counter counter = counter + 1 ; } } ; write (  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter = 1 ; f1 f1 [ 1 ] = build ( 2 , 2 ) ; f1 [ 2 ] = build ( 4 , 4 ) ; f3 = build ( 3 , 3 ) ;  write(f2.b); while while ( counter <= 10 ) { { write ( counter ) ;    write(f1.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4    write(f2.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4 counter counter = counter + 1 ; } } ; write ( f1  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter = 1 ; f1 f1 [ 1 ] = build ( 2 , 2 ) ; f1 [ 2 ] = build ( 4 , 4 ) ; f3 = build ( 3 , 3 ) ;  write(f2.b); while while ( counter <= 10 ) { { write ( counter ) ;    write(f1.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4    write(f2.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4 counter counter = counter + 1 ; } } ; write ( f1 [  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter = 1 ; f1 f1 [ 1 ] = build ( 2 , 2 ) ; f1 [ 2 ] = build ( 4 , 4 ) ; f3 = build ( 3 , 3 ) ;  write(f2.b); while while ( counter <= 10 ) { { write ( counter ) ;    write(f1.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4    write(f2.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4 counter counter = counter + 1 ; } } ; write ( f1 [ 2  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter = 1 ; f1 f1 [ 1 ] = build ( 2 , 2 ) ; f1 [ 2 ] = build ( 4 , 4 ) ; f3 = build ( 3 , 3 ) ;  write(f2.b); while while ( counter <= 10 ) { { write ( counter ) ;    write(f1.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4    write(f2.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4 counter counter = counter + 1 ; } } ; write ( f1 [ 2 ]  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter = 1 ; f1 f1 [ 1 ] = build ( 2 , 2 ) ; f1 [ 2 ] = build ( 4 , 4 ) ; f3 = build ( 3 , 3 ) ;  write(f2.b); while while ( counter <= 10 ) { { write ( counter ) ;    write(f1.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4    write(f2.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4 counter counter = counter + 1 ; } } ; write ( f1 [ 2 ] .  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter = 1 ; f1 f1 [ 1 ] = build ( 2 , 2 ) ; f1 [ 2 ] = build ( 4 , 4 ) ; f3 = build ( 3 , 3 ) ;  write(f2.b); while while ( counter <= 10 ) { { write ( counter ) ;    write(f1.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4    write(f2.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4 counter counter = counter + 1 ; } } ; write ( f1 [ 2 ] . evaluate  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter = 1 ; f1 f1 [ 1 ] = build ( 2 , 2 ) ; f1 [ 2 ] = build ( 4 , 4 ) ; f3 = build ( 3 , 3 ) ;  write(f2.b); while while ( counter <= 10 ) { { write ( counter ) ;    write(f1.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4    write(f2.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4 counter counter = counter + 1 ; } } ; write ( f1 [ 2 ] . evaluate (  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter = 1 ; f1 f1 [ 1 ] = build ( 2 , 2 ) ; f1 [ 2 ] = build ( 4 , 4 ) ; f3 = build ( 3 , 3 ) ;  write(f2.b); while while ( counter <= 10 ) { { write ( counter ) ;    write(f1.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4    write(f2.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4 counter counter = counter + 1 ; } } ; write ( f1 [ 2 ] . evaluate ( counter  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter = 1 ; f1 f1 [ 1 ] = build ( 2 , 2 ) ; f1 [ 2 ] = build ( 4 , 4 ) ; f3 = build ( 3 , 3 ) ;  write(f2.b); while while ( counter <= 10 ) { { write ( counter ) ;    write(f1.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4    write(f2.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4 counter counter = counter + 1 ; } } ; write ( f1 [ 2 ] . evaluate ( counter )  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter = 1 ; f1 f1 [ 1 ] = build ( 2 , 2 ) ; f1 [ 2 ] = build ( 4 , 4 ) ; f3 = build ( 3 , 3 ) ;  write(f2.b); while while ( counter <= 10 ) { { write ( counter ) ;    write(f1.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4    write(f2.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4 counter counter = counter + 1 ; } } ; write ( f1 [ 2 ] . evaluate ( counter ) )  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter = 1 ; f1 f1 [ 1 ] = build ( 2 , 2 ) ; f1 [ 2 ] = build ( 4 , 4 ) ; f3 = build ( 3 , 3 ) ;  write(f2.b); while while ( counter <= 10 ) { { write ( counter ) ;    write(f1.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4    write(f2.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4 counter counter = counter + 1 ; } } ; write ( f1 [ 2 ] . evaluate ( counter ) ) ;  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter = 1 ; f1 f1 [ 1 ] = build ( 2 , 2 ) ; f1 [ 2 ] = build ( 4 , 4 ) ; f3 = build ( 3 , 3 ) ;  write(f2.b); while while ( counter <= 10 ) { { write ( counter ) ;    write(f1.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4    write(f2.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4 counter counter = counter + 1 ; } } ; write ( f1 [ 2 ] . evaluate ( counter ) ) ; write  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter = 1 ; f1 f1 [ 1 ] = build ( 2 , 2 ) ; f1 [ 2 ] = build ( 4 , 4 ) ; f3 = build ( 3 , 3 ) ;  write(f2.b); while while ( counter <= 10 ) { { write ( counter ) ;    write(f1.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4    write(f2.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4 counter counter = counter + 1 ; } } ; write ( f1 [ 2 ] . evaluate ( counter ) ) ; write (  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter = 1 ; f1 f1 [ 1 ] = build ( 2 , 2 ) ; f1 [ 2 ] = build ( 4 , 4 ) ; f3 = build ( 3 , 3 ) ;  write(f2.b); while while ( counter <= 10 ) { { write ( counter ) ;    write(f1.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4    write(f2.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4 counter counter = counter + 1 ; } } ; write ( f1 [ 2 ] . evaluate ( counter ) ) ; write ( f3  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter = 1 ; f1 f1 [ 1 ] = build ( 2 , 2 ) ; f1 [ 2 ] = build ( 4 , 4 ) ; f3 = build ( 3 , 3 ) ;  write(f2.b); while while ( counter <= 10 ) { { write ( counter ) ;    write(f1.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4    write(f2.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4 counter counter = counter + 1 ; } } ; write ( f1 [ 2 ] . evaluate ( counter ) ) ; write ( f3 .  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter = 1 ; f1 f1 [ 1 ] = build ( 2 , 2 ) ; f1 [ 2 ] = build ( 4 , 4 ) ; f3 = build ( 3 , 3 ) ;  write(f2.b); while while ( counter <= 10 ) { { write ( counter ) ;    write(f1.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4    write(f2.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4 counter counter = counter + 1 ; } } ; write ( f1 [ 2 ] . evaluate ( counter ) ) ; write ( f3 . a  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter = 1 ; f1 f1 [ 1 ] = build ( 2 , 2 ) ; f1 [ 2 ] = build ( 4 , 4 ) ; f3 = build ( 3 , 3 ) ;  write(f2.b); while while ( counter <= 10 ) { { write ( counter ) ;    write(f1.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4    write(f2.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4 counter counter = counter + 1 ; } } ; write ( f1 [ 2 ] . evaluate ( counter ) ) ; write ( f3 . a )  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter = 1 ; f1 f1 [ 1 ] = build ( 2 , 2 ) ; f1 [ 2 ] = build ( 4 , 4 ) ; f3 = build ( 3 , 3 ) ;  write(f2.b); while while ( counter <= 10 ) { { write ( counter ) ;    write(f1.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4    write(f2.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4 counter counter = counter + 1 ; } } ; write ( f1 [ 2 ] . evaluate ( counter ) ) ; write ( f3 . a ) ;  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter = 1 ; f1 f1 [ 1 ] = build ( 2 , 2 ) ; f1 [ 2 ] = build ( 4 , 4 ) ; f3 = build ( 3 , 3 ) ;  write(f2.b); while while ( counter <= 10 ) { { write ( counter ) ;    write(f1.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4    write(f2.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4 counter counter = counter + 1 ; } } ; write ( f1 [ 2 ] . evaluate ( counter ) ) ; write ( f3 . a ) ; write  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter = 1 ; f1 f1 [ 1 ] = build ( 2 , 2 ) ; f1 [ 2 ] = build ( 4 , 4 ) ; f3 = build ( 3 , 3 ) ;  write(f2.b); while while ( counter <= 10 ) { { write ( counter ) ;    write(f1.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4    write(f2.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4 counter counter = counter + 1 ; } } ; write ( f1 [ 2 ] . evaluate ( counter ) ) ; write ( f3 . a ) ; write (  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter = 1 ; f1 f1 [ 1 ] = build ( 2 , 2 ) ; f1 [ 2 ] = build ( 4 , 4 ) ; f3 = build ( 3 , 3 ) ;  write(f2.b); while while ( counter <= 10 ) { { write ( counter ) ;    write(f1.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4    write(f2.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4 counter counter = counter + 1 ; } } ; write ( f1 [ 2 ] . evaluate ( counter ) ) ; write ( f3 . a ) ; write ( f3  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter = 1 ; f1 f1 [ 1 ] = build ( 2 , 2 ) ; f1 [ 2 ] = build ( 4 , 4 ) ; f3 = build ( 3 , 3 ) ;  write(f2.b); while while ( counter <= 10 ) { { write ( counter ) ;    write(f1.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4    write(f2.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4 counter counter = counter + 1 ; } } ; write ( f1 [ 2 ] . evaluate ( counter ) ) ; write ( f3 . a ) ; write ( f3 .  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter = 1 ; f1 f1 [ 1 ] = build ( 2 , 2 ) ; f1 [ 2 ] = build ( 4 , 4 ) ; f3 = build ( 3 , 3 ) ;  write(f2.b); while while ( counter <= 10 ) { { write ( counter ) ;    write(f1.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4    write(f2.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4 counter counter = counter + 1 ; } } ; write ( f1 [ 2 ] . evaluate ( counter ) ) ; write ( f3 . a ) ; write ( f3 . b  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter = 1 ; f1 f1 [ 1 ] = build ( 2 , 2 ) ; f1 [ 2 ] = build ( 4 , 4 ) ; f3 = build ( 3 , 3 ) ;  write(f2.b); while while ( counter <= 10 ) { { write ( counter ) ;    write(f1.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4    write(f2.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4 counter counter = counter + 1 ; } } ; write ( f1 [ 2 ] . evaluate ( counter ) ) ; write ( f3 . a ) ; write ( f3 . b )  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter = 1 ; f1 f1 [ 1 ] = build ( 2 , 2 ) ; f1 [ 2 ] = build ( 4 , 4 ) ; f3 = build ( 3 , 3 ) ;  write(f2.b); while while ( counter <= 10 ) { { write ( counter ) ;    write(f1.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4    write(f2.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4 counter counter = counter + 1 ; } } ; write ( f1 [ 2 ] . evaluate ( counter ) ) ; write ( f3 . a ) ; write ( f3 . b ) ;  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter = 1 ; f1 f1 [ 1 ] = build ( 2 , 2 ) ; f1 [ 2 ] = build ( 4 , 4 ) ; f3 = build ( 3 , 3 ) ;  write(f2.b); while while ( counter <= 10 ) { { write ( counter ) ;    write(f1.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4    write(f2.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4 counter counter = counter + 1 ; } } ; write ( f1 [ 2 ] . evaluate ( counter ) ) ; write ( f3 . a ) ; write ( f3 . b ) ; write  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter = 1 ; f1 f1 [ 1 ] = build ( 2 , 2 ) ; f1 [ 2 ] = build ( 4 , 4 ) ; f3 = build ( 3 , 3 ) ;  write(f2.b); while while ( counter <= 10 ) { { write ( counter ) ;    write(f1.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4    write(f2.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4 counter counter = counter + 1 ; } } ; write ( f1 [ 2 ] . evaluate ( counter ) ) ; write ( f3 . a ) ; write ( f3 . b ) ; write (  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter = 1 ; f1 f1 [ 1 ] = build ( 2 , 2 ) ; f1 [ 2 ] = build ( 4 , 4 ) ; f3 = build ( 3 , 3 ) ;  write(f2.b); while while ( counter <= 10 ) { { write ( counter ) ;    write(f1.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4    write(f2.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4 counter counter = counter + 1 ; } } ; write ( f1 [ 2 ] . evaluate ( counter ) ) ; write ( f3 . a ) ; write ( f3 . b ) ; write ( f3  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter = 1 ; f1 f1 [ 1 ] = build ( 2 , 2 ) ; f1 [ 2 ] = build ( 4 , 4 ) ; f3 = build ( 3 , 3 ) ;  write(f2.b); while while ( counter <= 10 ) { { write ( counter ) ;    write(f1.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4    write(f2.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4 counter counter = counter + 1 ; } } ; write ( f1 [ 2 ] . evaluate ( counter ) ) ; write ( f3 . a ) ; write ( f3 . b ) ; write ( f3 .  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter = 1 ; f1 f1 [ 1 ] = build ( 2 , 2 ) ; f1 [ 2 ] = build ( 4 , 4 ) ; f3 = build ( 3 , 3 ) ;  write(f2.b); while while ( counter <= 10 ) { { write ( counter ) ;    write(f1.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4    write(f2.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4 counter counter = counter + 1 ; } } ; write ( f1 [ 2 ] . evaluate ( counter ) ) ; write ( f3 . a ) ; write ( f3 . b ) ; write ( f3 . evaluate  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter = 1 ; f1 f1 [ 1 ] = build ( 2 , 2 ) ; f1 [ 2 ] = build ( 4 , 4 ) ; f3 = build ( 3 , 3 ) ;  write(f2.b); while while ( counter <= 10 ) { { write ( counter ) ;    write(f1.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4    write(f2.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4 counter counter = counter + 1 ; } } ; write ( f1 [ 2 ] . evaluate ( counter ) ) ; write ( f3 . a ) ; write ( f3 . b ) ; write ( f3 . evaluate (  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter = 1 ; f1 f1 [ 1 ] = build ( 2 , 2 ) ; f1 [ 2 ] = build ( 4 , 4 ) ; f3 = build ( 3 , 3 ) ;  write(f2.b); while while ( counter <= 10 ) { { write ( counter ) ;    write(f1.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4    write(f2.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4 counter counter = counter + 1 ; } } ; write ( f1 [ 2 ] . evaluate ( counter ) ) ; write ( f3 . a ) ; write ( f3 . b ) ; write ( f3 . evaluate ( 5  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter = 1 ; f1 f1 [ 1 ] = build ( 2 , 2 ) ; f1 [ 2 ] = build ( 4 , 4 ) ; f3 = build ( 3 , 3 ) ;  write(f2.b); while while ( counter <= 10 ) { { write ( counter ) ;    write(f1.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4    write(f2.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4 counter counter = counter + 1 ; } } ; write ( f1 [ 2 ] . evaluate ( counter ) ) ; write ( f3 . a ) ; write ( f3 . b ) ; write ( f3 . evaluate ( 5 )  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter = 1 ; f1 f1 [ 1 ] = build ( 2 , 2 ) ; f1 [ 2 ] = build ( 4 , 4 ) ; f3 = build ( 3 , 3 ) ;  write(f2.b); while while ( counter <= 10 ) { { write ( counter ) ;    write(f1.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4    write(f2.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4 counter counter = counter + 1 ; } } ; write ( f1 [ 2 ] . evaluate ( counter ) ) ; write ( f3 . a ) ; write ( f3 . b ) ; write ( f3 . evaluate ( 5 ) )  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter = 1 ; f1 f1 [ 1 ] = build ( 2 , 2 ) ; f1 [ 2 ] = build ( 4 , 4 ) ; f3 = build ( 3 , 3 ) ;  write(f2.b); while while ( counter <= 10 ) { { write ( counter ) ;    write(f1.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4    write(f2.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4 counter counter = counter + 1 ; } } ; write ( f1 [ 2 ] . evaluate ( counter ) ) ; write ( f3 . a ) ; write ( f3 . b ) ; write ( f3 . evaluate ( 5 ) ) ;  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter = 1 ; f1 f1 [ 1 ] = build ( 2 , 2 ) ; f1 [ 2 ] = build ( 4 , 4 ) ; f3 = build ( 3 , 3 ) ;  write(f2.b); while while ( counter <= 10 ) { { write ( counter ) ;    write(f1.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4    write(f2.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4 counter counter = counter + 1 ; } } ; write ( f1 [ 2 ] . evaluate ( counter ) ) ; write ( f3 . a ) ; write ( f3 . b ) ; write ( f3 . evaluate ( 5 ) ) ; write  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter = 1 ; f1 f1 [ 1 ] = build ( 2 , 2 ) ; f1 [ 2 ] = build ( 4 , 4 ) ; f3 = build ( 3 , 3 ) ;  write(f2.b); while while ( counter <= 10 ) { { write ( counter ) ;    write(f1.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4    write(f2.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4 counter counter = counter + 1 ; } } ; write ( f1 [ 2 ] . evaluate ( counter ) ) ; write ( f3 . a ) ; write ( f3 . b ) ; write ( f3 . evaluate ( 5 ) ) ; write (  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter = 1 ; f1 f1 [ 1 ] = build ( 2 , 2 ) ; f1 [ 2 ] = build ( 4 , 4 ) ; f3 = build ( 3 , 3 ) ;  write(f2.b); while while ( counter <= 10 ) { { write ( counter ) ;    write(f1.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4    write(f2.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4 counter counter = counter + 1 ; } } ; write ( f1 [ 2 ] . evaluate ( counter ) ) ; write ( f3 . a ) ; write ( f3 . b ) ; write ( f3 . evaluate ( 5 ) ) ; write ( f2  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter = 1 ; f1 f1 [ 1 ] = build ( 2 , 2 ) ; f1 [ 2 ] = build ( 4 , 4 ) ; f3 = build ( 3 , 3 ) ;  write(f2.b); while while ( counter <= 10 ) { { write ( counter ) ;    write(f1.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4    write(f2.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4 counter counter = counter + 1 ; } } ; write ( f1 [ 2 ] . evaluate ( counter ) ) ; write ( f3 . a ) ; write ( f3 . b ) ; write ( f3 . evaluate ( 5 ) ) ; write ( f2 .  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter = 1 ; f1 f1 [ 1 ] = build ( 2 , 2 ) ; f1 [ 2 ] = build ( 4 , 4 ) ; f3 = build ( 3 , 3 ) ;  write(f2.b); while while ( counter <= 10 ) { { write ( counter ) ;    write(f1.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4    write(f2.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4 counter counter = counter + 1 ; } } ; write ( f1 [ 2 ] . evaluate ( counter ) ) ; write ( f3 . a ) ; write ( f3 . b ) ; write ( f3 . evaluate ( 5 ) ) ; write ( f2 . a  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter = 1 ; f1 f1 [ 1 ] = build ( 2 , 2 ) ; f1 [ 2 ] = build ( 4 , 4 ) ; f3 = build ( 3 , 3 ) ;  write(f2.b); while while ( counter <= 10 ) { { write ( counter ) ;    write(f1.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4    write(f2.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4 counter counter = counter + 1 ; } } ; write ( f1 [ 2 ] . evaluate ( counter ) ) ; write ( f3 . a ) ; write ( f3 . b ) ; write ( f3 . evaluate ( 5 ) ) ; write ( f2 . a +  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter = 1 ; f1 f1 [ 1 ] = build ( 2 , 2 ) ; f1 [ 2 ] = build ( 4 , 4 ) ; f3 = build ( 3 , 3 ) ;  write(f2.b); while while ( counter <= 10 ) { { write ( counter ) ;    write(f1.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4    write(f2.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4 counter counter = counter + 1 ; } } ; write ( f1 [ 2 ] . evaluate ( counter ) ) ; write ( f3 . a ) ; write ( f3 . b ) ; write ( f3 . evaluate ( 5 ) ) ; write ( f2 . a + counter  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter = 1 ; f1 f1 [ 1 ] = build ( 2 , 2 ) ; f1 [ 2 ] = build ( 4 , 4 ) ; f3 = build ( 3 , 3 ) ;  write(f2.b); while while ( counter <= 10 ) { { write ( counter ) ;    write(f1.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4    write(f2.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4 counter counter = counter + 1 ; } } ; write ( f1 [ 2 ] . evaluate ( counter ) ) ; write ( f3 . a ) ; write ( f3 . b ) ; write ( f3 . evaluate ( 5 ) ) ; write ( f2 . a + counter *  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter = 1 ; f1 f1 [ 1 ] = build ( 2 , 2 ) ; f1 [ 2 ] = build ( 4 , 4 ) ; f3 = build ( 3 , 3 ) ;  write(f2.b); while while ( counter <= 10 ) { { write ( counter ) ;    write(f1.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4    write(f2.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4 counter counter = counter + 1 ; } } ; write ( f1 [ 2 ] . evaluate ( counter ) ) ; write ( f3 . a ) ; write ( f3 . b ) ; write ( f3 . evaluate ( 5 ) ) ; write ( f2 . a + counter * 3  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter = 1 ; f1 f1 [ 1 ] = build ( 2 , 2 ) ; f1 [ 2 ] = build ( 4 , 4 ) ; f3 = build ( 3 , 3 ) ;  write(f2.b); while while ( counter <= 10 ) { { write ( counter ) ;    write(f1.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4    write(f2.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4 counter counter = counter + 1 ; } } ; write ( f1 [ 2 ] . evaluate ( counter ) ) ; write ( f3 . a ) ; write ( f3 . b ) ; write ( f3 . evaluate ( 5 ) ) ; write ( f2 . a + counter * 3 +  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter = 1 ; f1 f1 [ 1 ] = build ( 2 , 2 ) ; f1 [ 2 ] = build ( 4 , 4 ) ; f3 = build ( 3 , 3 ) ;  write(f2.b); while while ( counter <= 10 ) { { write ( counter ) ;    write(f1.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4    write(f2.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4 counter counter = counter + 1 ; } } ; write ( f1 [ 2 ] . evaluate ( counter ) ) ; write ( f3 . a ) ; write ( f3 . b ) ; write ( f3 . evaluate ( 5 ) ) ; write ( f2 . a + counter * 3 + counter  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter = 1 ; f1 f1 [ 1 ] = build ( 2 , 2 ) ; f1 [ 2 ] = build ( 4 , 4 ) ; f3 = build ( 3 , 3 ) ;  write(f2.b); while while ( counter <= 10 ) { { write ( counter ) ;    write(f1.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4    write(f2.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4 counter counter = counter + 1 ; } } ; write ( f1 [ 2 ] . evaluate ( counter ) ) ; write ( f3 . a ) ; write ( f3 . b ) ; write ( f3 . evaluate ( 5 ) ) ; write ( f2 . a + counter * 3 + counter *  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter = 1 ; f1 f1 [ 1 ] = build ( 2 , 2 ) ; f1 [ 2 ] = build ( 4 , 4 ) ; f3 = build ( 3 , 3 ) ;  write(f2.b); while while ( counter <= 10 ) { { write ( counter ) ;    write(f1.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4    write(f2.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4 counter counter = counter + 1 ; } } ; write ( f1 [ 2 ] . evaluate ( counter ) ) ; write ( f3 . a ) ; write ( f3 . b ) ; write ( f3 . evaluate ( 5 ) ) ; write ( f2 . a + counter * 3 + counter * (  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter = 1 ; f1 f1 [ 1 ] = build ( 2 , 2 ) ; f1 [ 2 ] = build ( 4 , 4 ) ; f3 = build ( 3 , 3 ) ;  write(f2.b); while while ( counter <= 10 ) { { write ( counter ) ;    write(f1.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4    write(f2.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4 counter counter = counter + 1 ; } } ; write ( f1 [ 2 ] . evaluate ( counter ) ) ; write ( f3 . a ) ; write ( f3 . b ) ; write ( f3 . evaluate ( 5 ) ) ; write ( f2 . a + counter * 3 + counter * ( 3  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter = 1 ; f1 f1 [ 1 ] = build ( 2 , 2 ) ; f1 [ 2 ] = build ( 4 , 4 ) ; f3 = build ( 3 , 3 ) ;  write(f2.b); while while ( counter <= 10 ) { { write ( counter ) ;    write(f1.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4    write(f2.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4 counter counter = counter + 1 ; } } ; write ( f1 [ 2 ] . evaluate ( counter ) ) ; write ( f3 . a ) ; write ( f3 . b ) ; write ( f3 . evaluate ( 5 ) ) ; write ( f2 . a + counter * 3 + counter * ( 3 +  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter = 1 ; f1 f1 [ 1 ] = build ( 2 , 2 ) ; f1 [ 2 ] = build ( 4 , 4 ) ; f3 = build ( 3 , 3 ) ;  write(f2.b); while while ( counter <= 10 ) { { write ( counter ) ;    write(f1.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4    write(f2.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4 counter counter = counter + 1 ; } } ; write ( f1 [ 2 ] . evaluate ( counter ) ) ; write ( f3 . a ) ; write ( f3 . b ) ; write ( f3 . evaluate ( 5 ) ) ; write ( f2 . a + counter * 3 + counter * ( 3 + 4  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter = 1 ; f1 f1 [ 1 ] = build ( 2 , 2 ) ; f1 [ 2 ] = build ( 4 , 4 ) ; f3 = build ( 3 , 3 ) ;  write(f2.b); while while ( counter <= 10 ) { { write ( counter ) ;    write(f1.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4    write(f2.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4 counter counter = counter + 1 ; } } ; write ( f1 [ 2 ] . evaluate ( counter ) ) ; write ( f3 . a ) ; write ( f3 . b ) ; write ( f3 . evaluate ( 5 ) ) ; write ( f2 . a + counter * 3 + counter * ( 3 + 4 )  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter = 1 ; f1 f1 [ 1 ] = build ( 2 , 2 ) ; f1 [ 2 ] = build ( 4 , 4 ) ; f3 = build ( 3 , 3 ) ;  write(f2.b); while while ( counter <= 10 ) { { write ( counter ) ;    write(f1.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4    write(f2.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4 counter counter = counter + 1 ; } } ; write ( f1 [ 2 ] . evaluate ( counter ) ) ; write ( f3 . a ) ; write ( f3 . b ) ; write ( f3 . evaluate ( 5 ) ) ; write ( f2 . a + counter * 3 + counter * ( 3 + 4 ) )  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter = 1 ; f1 f1 [ 1 ] = build ( 2 , 2 ) ; f1 [ 2 ] = build ( 4 , 4 ) ; f3 = build ( 3 , 3 ) ;  write(f2.b); while while ( counter <= 10 ) { { write ( counter ) ;    write(f1.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4    write(f2.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4 counter counter = counter + 1 ; } } ; write ( f1 [ 2 ] . evaluate ( counter ) ) ; write ( f3 . a ) ; write ( f3 . b ) ; write ( f3 . evaluate ( 5 ) ) ; write ( f2 . a + counter * 3 + counter * ( 3 + 4 ) ) ;  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 5 ] ; localvar localvar f3 : LINEAR ; localvar f2 : LINEAR ( 14 , 10 ) ; localvar localvar counter : integer ; counter counter = 1 ; f1 f1 [ 1 ] = build ( 2 , 2 ) ; f1 [ 2 ] = build ( 4 , 4 ) ; f3 = build ( 3 , 3 ) ;  write(f2.b); while while ( counter <= 10 ) { { write ( counter ) ;    write(f1.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4    write(f2.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4 counter counter = counter + 1 ; } } ; write ( f1 [ 2 ] . evaluate ( counter ) ) ; write ( f3 . a ) ; write ( f3 . b ) ; write ( f3 . evaluate ( 5 ) ) ; write ( f2 . a + counter * 3 + counter * ( 3 + 4 ) ) ; }  
