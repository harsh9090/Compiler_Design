Comment: - 1.1  Allocate memory for basic types (integer, integer).1.2  Allocate memory for arrays of basic types.1.3  Allocate memory for objects.1.4  Allocate memory for arrays of objects.2.1  Branch to a function’s code block, execute the code block, branch back to the calling function.2.2  Pass parameters as local values to the function’s code block.2.3  Upon execution of a return statement, pass the return value back to the calling function.2.4  Call to member functions that can use their object’s data members.3.1 Assignment statement: assignment of the resulting value of an expression to a variable, independently of what is the expression to the right of the assignment operator.3.2 Conditional statement: implementation of a branching mechanism.3.3 Loop statement: implementation of a branching mechanism.3.4 Input/output statement: Moon machine keyboard input/console output4.1. For arrays of basic types (integer and integer), access to an array’s elements.4.2. For arrays of objects, access to an array’s element’s data members.4.3. For objects, access to members of basic types.4.4. For objects, access to members of array or object types.5.1. Computing the value of an entire complex expression.5.2. Expression involving an array factor whose indexes are themselves expressions.5.3. Expression involving an object factor referring to object members.* 
Comment: -  Assignment 5 coverage: 
Comment: -       ------------- 
Comment: -       | YES | NO  | 
Comment: -       -------------  
Comment: -  1.1: |  X  |     | 
Comment: -  1.2: |  X  |     | 
Comment: -  1.3: |  X  |     | 
Comment: -  1.4: |     |  X  | 
Comment: -  2.1: |  X  |     | 
Comment: -  2.2: |  X  |     | 
Comment: -  2.3: |  X  |     | 
Comment: -  2.4: |  X  |     | 
Comment: -  3.1: |  X  |     | 
Comment: -  3.2: |  X  |     | 
Comment: -  3.3: |  X  |     | 
Comment: -  3.4: |  X  |     | 
Comment: -  4.1: |     |  X  | 
Comment: -  4.2: |     |  X  | 
Comment: -  4.3: |  X  |     | 
Comment: -  4.4: |  X  |     | 
Comment: -  5.1: |  X  |     | 
Comment: -  5.2: |     |  X  | 
Comment: -  5.3: |  X  |     | 
Comment: -       ------------- 
Comment: -  ====== struct declarations ====== // 
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL {  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate :  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : (  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x :  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer )  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) =>  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ;  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; }  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ;  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL {  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a :  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ;  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b :  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ;  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor :  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : (  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A :  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer ,  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B :  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer )  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ;  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate :  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : (  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x :  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer )  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) =>  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ;  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; }  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ;  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL {  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a :  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ;  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b :  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ;  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c :  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ;  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor :  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : (  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A :  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer ,  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B :  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer ,  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C :  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer )  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ;  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate :  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : (  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x :  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer )  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) =>  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ;  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; }  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ;  
Comment: -  ====== member function implementations ====== //   
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL ::  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate (  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x :  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer )  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) =>  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer  
Comment: -  2.1, 2.2 
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { {  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return (  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 )  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ;  
Comment: -  2.3 
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } }  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC ::  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate (  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x :  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer )  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) =>  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer {  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result :  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ;  
Comment: -  1.1 
Comment: - Using Horner's method 
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result =  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ;  
Comment: -  3.1        
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result =  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result *  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x +  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ;  
Comment: -  3.1, 5.1 
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result =  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result *  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x +  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ;  
Comment: -  3.1, 5.1 
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return (  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result )  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ;  
Comment: -  2.3 
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } }  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC ::  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor (  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A :  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer ,  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B :  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer ,  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C :  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer )  
Comment: -  2.1, 2.2 
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { {  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self .  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a =  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ;  
Comment: -  3.1, 5.3 
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self .  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b =  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ;  
Comment: -  3.1, 5.3 
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self .  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c =  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ;  
Comment: -  3.1, 5.3 
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } }  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR ::  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor (  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A :  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer ,  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B :  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer )  
Comment: -  2.1, 2.2 
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { {  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self .  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a =  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A +  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ;  
Comment: -  3.1, 5.3 
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self .  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b =  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B +  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ;  
Comment: -  3.1, 5.3 
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } }  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR ::  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate (  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x :  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer )  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) =>  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer  
Comment: -  2.1, 2.2 
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { {  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result :  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ;  
Comment: -  1.1 
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result =  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ;  
Comment: -  3.1 
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result =  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a *  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x +  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ;  
Comment: -  3.1, 5.1 
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return (  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result )  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ;  
Comment: -  2.3 
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } }  
Comment: -  ====== main ====== // 
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main (  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( )  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) =>  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void  
Comment: -  2.1, 2.2 
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { {  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 :  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 3  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 3 ]  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 3 ] ;  
Comment: -  1.3, 2.1, 2.2, 2.4 
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 3 ] ; localvar localvar  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 3 ] ; localvar localvar f2  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 3 ] ; localvar localvar f2 :  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 3 ] ; localvar localvar f2 : QUADRATIC  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 3 ] ; localvar localvar f2 : QUADRATIC (  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 3 ] ; localvar localvar f2 : QUADRATIC ( -  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 3 ] ; localvar localvar f2 : QUADRATIC ( - 2  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 3 ] ; localvar localvar f2 : QUADRATIC ( - 2 ,  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 3 ] ; localvar localvar f2 : QUADRATIC ( - 2 , 1  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 3 ] ; localvar localvar f2 : QUADRATIC ( - 2 , 1 ,  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 3 ] ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 3 ] ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0 )  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 3 ] ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ;  
Comment: -  1.3, 2.1, 2.2, 2.4 
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 3 ] ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar localvar  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 3 ] ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar localvar counter  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 3 ] ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar localvar counter :  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 3 ] ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar localvar counter : integer  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 3 ] ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar localvar counter : integer ;  
Comment: -  1.1 
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 3 ] ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar localvar counter : integer ; f1 f1  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 3 ] ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar localvar counter : integer ; f1 f1 [  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 3 ] ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar localvar counter : integer ; f1 f1 [ 1  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 3 ] ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar localvar counter : integer ; f1 f1 [ 1 ]  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 3 ] ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar localvar counter : integer ; f1 f1 [ 1 ] =  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 3 ] ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar localvar counter : integer ; f1 f1 [ 1 ] = build  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 3 ] ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar localvar counter : integer ; f1 f1 [ 1 ] = build (  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 3 ] ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar localvar counter : integer ; f1 f1 [ 1 ] = build ( 3  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 3 ] ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar localvar counter : integer ; f1 f1 [ 1 ] = build ( 3 ,  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 3 ] ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar localvar counter : integer ; f1 f1 [ 1 ] = build ( 3 , 4  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 3 ] ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar localvar counter : integer ; f1 f1 [ 1 ] = build ( 3 , 4 )  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 3 ] ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar localvar counter : integer ; f1 f1 [ 1 ] = build ( 3 , 4 ) ;  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 3 ] ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar localvar counter : integer ; f1 f1 [ 1 ] = build ( 3 , 4 ) ; counter  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 3 ] ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar localvar counter : integer ; f1 f1 [ 1 ] = build ( 3 , 4 ) ; counter =  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 3 ] ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar localvar counter : integer ; f1 f1 [ 1 ] = build ( 3 , 4 ) ; counter = 1  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 3 ] ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar localvar counter : integer ; f1 f1 [ 1 ] = build ( 3 , 4 ) ; counter = 1 ;  
Comment: -  3.1 
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 3 ] ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar localvar counter : integer ; f1 f1 [ 1 ] = build ( 3 , 4 ) ; counter = 1 ; f1 f1  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 3 ] ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar localvar counter : integer ; f1 f1 [ 1 ] = build ( 3 , 4 ) ; counter = 1 ; f1 f1 [  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 3 ] ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar localvar counter : integer ; f1 f1 [ 1 ] = build ( 3 , 4 ) ; counter = 1 ; f1 f1 [ 0  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 3 ] ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar localvar counter : integer ; f1 f1 [ 1 ] = build ( 3 , 4 ) ; counter = 1 ; f1 f1 [ 0 ]  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 3 ] ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar localvar counter : integer ; f1 f1 [ 1 ] = build ( 3 , 4 ) ; counter = 1 ; f1 f1 [ 0 ] =  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 3 ] ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar localvar counter : integer ; f1 f1 [ 1 ] = build ( 3 , 4 ) ; counter = 1 ; f1 f1 [ 0 ] = build  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 3 ] ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar localvar counter : integer ; f1 f1 [ 1 ] = build ( 3 , 4 ) ; counter = 1 ; f1 f1 [ 0 ] = build (  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 3 ] ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar localvar counter : integer ; f1 f1 [ 1 ] = build ( 3 , 4 ) ; counter = 1 ; f1 f1 [ 0 ] = build ( 6  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 3 ] ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar localvar counter : integer ; f1 f1 [ 1 ] = build ( 3 , 4 ) ; counter = 1 ; f1 f1 [ 0 ] = build ( 6 ,  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 3 ] ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar localvar counter : integer ; f1 f1 [ 1 ] = build ( 3 , 4 ) ; counter = 1 ; f1 f1 [ 0 ] = build ( 6 , 7  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 3 ] ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar localvar counter : integer ; f1 f1 [ 1 ] = build ( 3 , 4 ) ; counter = 1 ; f1 f1 [ 0 ] = build ( 6 , 7 )  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 3 ] ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar localvar counter : integer ; f1 f1 [ 1 ] = build ( 3 , 4 ) ; counter = 1 ; f1 f1 [ 0 ] = build ( 6 , 7 ) ;  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 3 ] ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar localvar counter : integer ; f1 f1 [ 1 ] = build ( 3 , 4 ) ; counter = 1 ; f1 f1 [ 0 ] = build ( 6 , 7 ) ; f1  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 3 ] ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar localvar counter : integer ; f1 f1 [ 1 ] = build ( 3 , 4 ) ; counter = 1 ; f1 f1 [ 0 ] = build ( 6 , 7 ) ; f1 [  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 3 ] ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar localvar counter : integer ; f1 f1 [ 1 ] = build ( 3 , 4 ) ; counter = 1 ; f1 f1 [ 0 ] = build ( 6 , 7 ) ; f1 [ 2  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 3 ] ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar localvar counter : integer ; f1 f1 [ 1 ] = build ( 3 , 4 ) ; counter = 1 ; f1 f1 [ 0 ] = build ( 6 , 7 ) ; f1 [ 2 ]  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 3 ] ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar localvar counter : integer ; f1 f1 [ 1 ] = build ( 3 , 4 ) ; counter = 1 ; f1 f1 [ 0 ] = build ( 6 , 7 ) ; f1 [ 2 ] =  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 3 ] ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar localvar counter : integer ; f1 f1 [ 1 ] = build ( 3 , 4 ) ; counter = 1 ; f1 f1 [ 0 ] = build ( 6 , 7 ) ; f1 [ 2 ] = build  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 3 ] ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar localvar counter : integer ; f1 f1 [ 1 ] = build ( 3 , 4 ) ; counter = 1 ; f1 f1 [ 0 ] = build ( 6 , 7 ) ; f1 [ 2 ] = build (  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 3 ] ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar localvar counter : integer ; f1 f1 [ 1 ] = build ( 3 , 4 ) ; counter = 1 ; f1 f1 [ 0 ] = build ( 6 , 7 ) ; f1 [ 2 ] = build ( 9  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 3 ] ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar localvar counter : integer ; f1 f1 [ 1 ] = build ( 3 , 4 ) ; counter = 1 ; f1 f1 [ 0 ] = build ( 6 , 7 ) ; f1 [ 2 ] = build ( 9 ,  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 3 ] ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar localvar counter : integer ; f1 f1 [ 1 ] = build ( 3 , 4 ) ; counter = 1 ; f1 f1 [ 0 ] = build ( 6 , 7 ) ; f1 [ 2 ] = build ( 9 , 10  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 3 ] ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar localvar counter : integer ; f1 f1 [ 1 ] = build ( 3 , 4 ) ; counter = 1 ; f1 f1 [ 0 ] = build ( 6 , 7 ) ; f1 [ 2 ] = build ( 9 , 10 )  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 3 ] ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar localvar counter : integer ; f1 f1 [ 1 ] = build ( 3 , 4 ) ; counter = 1 ; f1 f1 [ 0 ] = build ( 6 , 7 ) ; f1 [ 2 ] = build ( 9 , 10 ) ;  
Comment: -   write(f1[0].evaluate(counter)); 
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 3 ] ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar localvar counter : integer ; f1 f1 [ 1 ] = build ( 3 , 4 ) ; counter = 1 ; f1 f1 [ 0 ] = build ( 6 , 7 ) ; f1 [ 2 ] = build ( 9 , 10 ) ; write write  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 3 ] ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar localvar counter : integer ; f1 f1 [ 1 ] = build ( 3 , 4 ) ; counter = 1 ; f1 f1 [ 0 ] = build ( 6 , 7 ) ; f1 [ 2 ] = build ( 9 , 10 ) ; write write (  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 3 ] ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar localvar counter : integer ; f1 f1 [ 1 ] = build ( 3 , 4 ) ; counter = 1 ; f1 f1 [ 0 ] = build ( 6 , 7 ) ; f1 [ 2 ] = build ( 9 , 10 ) ; write write ( f1  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 3 ] ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar localvar counter : integer ; f1 f1 [ 1 ] = build ( 3 , 4 ) ; counter = 1 ; f1 f1 [ 0 ] = build ( 6 , 7 ) ; f1 [ 2 ] = build ( 9 , 10 ) ; write write ( f1 [  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 3 ] ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar localvar counter : integer ; f1 f1 [ 1 ] = build ( 3 , 4 ) ; counter = 1 ; f1 f1 [ 0 ] = build ( 6 , 7 ) ; f1 [ 2 ] = build ( 9 , 10 ) ; write write ( f1 [ 2  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 3 ] ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar localvar counter : integer ; f1 f1 [ 1 ] = build ( 3 , 4 ) ; counter = 1 ; f1 f1 [ 0 ] = build ( 6 , 7 ) ; f1 [ 2 ] = build ( 9 , 10 ) ; write write ( f1 [ 2 ]  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 3 ] ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar localvar counter : integer ; f1 f1 [ 1 ] = build ( 3 , 4 ) ; counter = 1 ; f1 f1 [ 0 ] = build ( 6 , 7 ) ; f1 [ 2 ] = build ( 9 , 10 ) ; write write ( f1 [ 2 ] .  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 3 ] ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar localvar counter : integer ; f1 f1 [ 1 ] = build ( 3 , 4 ) ; counter = 1 ; f1 f1 [ 0 ] = build ( 6 , 7 ) ; f1 [ 2 ] = build ( 9 , 10 ) ; write write ( f1 [ 2 ] . evaluate  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 3 ] ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar localvar counter : integer ; f1 f1 [ 1 ] = build ( 3 , 4 ) ; counter = 1 ; f1 f1 [ 0 ] = build ( 6 , 7 ) ; f1 [ 2 ] = build ( 9 , 10 ) ; write write ( f1 [ 2 ] . evaluate (  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 3 ] ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar localvar counter : integer ; f1 f1 [ 1 ] = build ( 3 , 4 ) ; counter = 1 ; f1 f1 [ 0 ] = build ( 6 , 7 ) ; f1 [ 2 ] = build ( 9 , 10 ) ; write write ( f1 [ 2 ] . evaluate ( counter  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 3 ] ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar localvar counter : integer ; f1 f1 [ 1 ] = build ( 3 , 4 ) ; counter = 1 ; f1 f1 [ 0 ] = build ( 6 , 7 ) ; f1 [ 2 ] = build ( 9 , 10 ) ; write write ( f1 [ 2 ] . evaluate ( counter )  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 3 ] ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar localvar counter : integer ; f1 f1 [ 1 ] = build ( 3 , 4 ) ; counter = 1 ; f1 f1 [ 0 ] = build ( 6 , 7 ) ; f1 [ 2 ] = build ( 9 , 10 ) ; write write ( f1 [ 2 ] . evaluate ( counter ) )  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 3 ] ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar localvar counter : integer ; f1 f1 [ 1 ] = build ( 3 , 4 ) ; counter = 1 ; f1 f1 [ 0 ] = build ( 6 , 7 ) ; f1 [ 2 ] = build ( 9 , 10 ) ; write write ( f1 [ 2 ] . evaluate ( counter ) ) ;  
Comment: -  3.4, 2.1, 2.2, 2.4 
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 3 ] ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar localvar counter : integer ; f1 f1 [ 1 ] = build ( 3 , 4 ) ; counter = 1 ; f1 f1 [ 0 ] = build ( 6 , 7 ) ; f1 [ 2 ] = build ( 9 , 10 ) ; write write ( f1 [ 2 ] . evaluate ( counter ) ) ; write write  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 3 ] ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar localvar counter : integer ; f1 f1 [ 1 ] = build ( 3 , 4 ) ; counter = 1 ; f1 f1 [ 0 ] = build ( 6 , 7 ) ; f1 [ 2 ] = build ( 9 , 10 ) ; write write ( f1 [ 2 ] . evaluate ( counter ) ) ; write write (  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 3 ] ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar localvar counter : integer ; f1 f1 [ 1 ] = build ( 3 , 4 ) ; counter = 1 ; f1 f1 [ 0 ] = build ( 6 , 7 ) ; f1 [ 2 ] = build ( 9 , 10 ) ; write write ( f1 [ 2 ] . evaluate ( counter ) ) ; write write ( f2  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 3 ] ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar localvar counter : integer ; f1 f1 [ 1 ] = build ( 3 , 4 ) ; counter = 1 ; f1 f1 [ 0 ] = build ( 6 , 7 ) ; f1 [ 2 ] = build ( 9 , 10 ) ; write write ( f1 [ 2 ] . evaluate ( counter ) ) ; write write ( f2 .  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 3 ] ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar localvar counter : integer ; f1 f1 [ 1 ] = build ( 3 , 4 ) ; counter = 1 ; f1 f1 [ 0 ] = build ( 6 , 7 ) ; f1 [ 2 ] = build ( 9 , 10 ) ; write write ( f1 [ 2 ] . evaluate ( counter ) ) ; write write ( f2 . evaluate  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 3 ] ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar localvar counter : integer ; f1 f1 [ 1 ] = build ( 3 , 4 ) ; counter = 1 ; f1 f1 [ 0 ] = build ( 6 , 7 ) ; f1 [ 2 ] = build ( 9 , 10 ) ; write write ( f1 [ 2 ] . evaluate ( counter ) ) ; write write ( f2 . evaluate (  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 3 ] ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar localvar counter : integer ; f1 f1 [ 1 ] = build ( 3 , 4 ) ; counter = 1 ; f1 f1 [ 0 ] = build ( 6 , 7 ) ; f1 [ 2 ] = build ( 9 , 10 ) ; write write ( f1 [ 2 ] . evaluate ( counter ) ) ; write write ( f2 . evaluate ( counter  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 3 ] ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar localvar counter : integer ; f1 f1 [ 1 ] = build ( 3 , 4 ) ; counter = 1 ; f1 f1 [ 0 ] = build ( 6 , 7 ) ; f1 [ 2 ] = build ( 9 , 10 ) ; write write ( f1 [ 2 ] . evaluate ( counter ) ) ; write write ( f2 . evaluate ( counter )  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 3 ] ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar localvar counter : integer ; f1 f1 [ 1 ] = build ( 3 , 4 ) ; counter = 1 ; f1 f1 [ 0 ] = build ( 6 , 7 ) ; f1 [ 2 ] = build ( 9 , 10 ) ; write write ( f1 [ 2 ] . evaluate ( counter ) ) ; write write ( f2 . evaluate ( counter ) )  
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 3 ] ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar localvar counter : integer ; f1 f1 [ 1 ] = build ( 3 , 4 ) ; counter = 1 ; f1 f1 [ 0 ] = build ( 6 , 7 ) ; f1 [ 2 ] = build ( 9 , 10 ) ; write write ( f1 [ 2 ] . evaluate ( counter ) ) ; write write ( f2 . evaluate ( counter ) ) ;  
Comment: -  3.4, 2.1, 2.2, 2.4 
 Assignment 5 coverage:       -------------       | YES | NO  |       -------------   1.1: |  X  |     |  1.2: |  X  |     |  1.3: |  X  |     |  1.4: |     |  X  |  2.1: |  X  |     |  2.2: |  X  |     |  2.3: |  X  |     |  2.4: |  X  |     |  3.1: |  X  |     |  3.2: |  X  |     |  3.3: |  X  |     |  3.4: |  X  |     |  4.1: |     |  X  |  4.2: |     |  X  |  4.3: |  X  |     |  4.4: |  X  |     |  5.1: |  X  |     |  5.2: |     |  X  |  5.3: |  X  |     |       -------------  ====== struct declarations ====== // class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A + 4 ; self self . b = B + 4 ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR [ 3 ] ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar localvar counter : integer ; f1 f1 [ 1 ] = build ( 3 , 4 ) ; counter = 1 ; f1 f1 [ 0 ] = build ( 6 , 7 ) ; f1 [ 2 ] = build ( 9 , 10 ) ; write write ( f1 [ 2 ] . evaluate ( counter ) ) ; write write ( f2 . evaluate ( counter ) ) ; } }  
