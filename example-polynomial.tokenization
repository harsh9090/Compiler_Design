Comment: -  ====== struct declarations ====== // 
class class  
class class POLYNOMIAL  
class class POLYNOMIAL {  
class class POLYNOMIAL { public  
class class POLYNOMIAL { public function  
class class POLYNOMIAL { public function evaluate  
class class POLYNOMIAL { public function evaluate :  
class class POLYNOMIAL { public function evaluate : (  
class class POLYNOMIAL { public function evaluate : ( x  
class class POLYNOMIAL { public function evaluate : ( x :  
class class POLYNOMIAL { public function evaluate : ( x : integer  
class class POLYNOMIAL { public function evaluate : ( x : integer )  
class class POLYNOMIAL { public function evaluate : ( x : integer ) =>  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ;  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; }  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ;  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL {  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a :  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ;  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b :  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ;  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor :  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : (  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A :  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer ,  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B :  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer )  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ;  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate :  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : (  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x :  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer )  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) =>  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ;  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; }  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ;  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL {  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a :  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ;  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b :  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ;  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c :  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ;  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor :  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : (  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A :  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer ,  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B :  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer ,  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C :  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer )  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ;  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate :  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : (  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x :  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer )  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) =>  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ;  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; }  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ;  
Comment: -  ====== member function implementations ====== //   
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL ::  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate (  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x :  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer )  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) =>  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer  
Comment: -  2.1, 2.2 
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { {  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return (  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 )  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ;  
Comment: -  2.3 
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } }  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC ::  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate (  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x :  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer )  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) =>  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer {  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result :  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ;  
Comment: -  1.1 
Comment: - Using Horner's method 
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result =  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ;  
Comment: -  3.1        
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result =  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result *  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x +  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ;  
Comment: -  3.1, 5.1 
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result =  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result *  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x +  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ;  
Comment: -  3.1, 5.1 
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return (  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result )  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ;  
Comment: -  2.3 
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } }  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC ::  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor (  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A :  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer ,  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B :  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer ,  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C :  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer )  
Comment: -  2.1, 2.2 
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { {  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self .  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a =  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ;  
Comment: -  3.1, 5.3 
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self .  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b =  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ;  
Comment: -  3.1, 5.3 
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self .  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c =  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ;  
Comment: -  3.1, 5.3 
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } }  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR ::  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor (  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A :  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer ,  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B :  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer )  
Comment: -  2.1, 2.2 
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { {  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self .  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a =  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ;  
Comment: -  3.1, 5.3 
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self .  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b =  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ;  
Comment: -  3.1, 5.3 
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } }  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR ::  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate (  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x :  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer )  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) =>  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer  
Comment: -  2.1, 2.2 
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { {  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result :  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ;  
Comment: -  1.1 
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result =  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ;  
Comment: -  3.1 
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result =  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a *  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x +  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ;  
Comment: -  3.1, 5.1 
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return (  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result )  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ;  
Comment: -  2.3 
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } }  
Comment: -  ====== main ====== // 
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main (  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( )  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) =>  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void  
Comment: -  2.1, 2.2 
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { {  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 :  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR (  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR ( 2  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR ( 2 ,  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR ( 2 , 3  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR ( 2 , 3 )  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR ( 2 , 3 ) ;  
Comment: -  1.3, 2.1, 2.2, 2.4 
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR ( 2 , 3 ) ; localvar localvar  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR ( 2 , 3 ) ; localvar localvar f2  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR ( 2 , 3 ) ; localvar localvar f2 :  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR ( 2 , 3 ) ; localvar localvar f2 : QUADRATIC  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR ( 2 , 3 ) ; localvar localvar f2 : QUADRATIC (  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR ( 2 , 3 ) ; localvar localvar f2 : QUADRATIC ( -  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR ( 2 , 3 ) ; localvar localvar f2 : QUADRATIC ( - 2  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR ( 2 , 3 ) ; localvar localvar f2 : QUADRATIC ( - 2 ,  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR ( 2 , 3 ) ; localvar localvar f2 : QUADRATIC ( - 2 , 1  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR ( 2 , 3 ) ; localvar localvar f2 : QUADRATIC ( - 2 , 1 ,  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR ( 2 , 3 ) ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR ( 2 , 3 ) ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0 )  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR ( 2 , 3 ) ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ;  
Comment: -  1.3, 2.1, 2.2, 2.4 
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR ( 2 , 3 ) ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar localvar  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR ( 2 , 3 ) ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar localvar counter  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR ( 2 , 3 ) ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar localvar counter :  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR ( 2 , 3 ) ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar localvar counter : integer  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR ( 2 , 3 ) ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar localvar counter : integer ;  
Comment: -  1.1 
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR ( 2 , 3 ) ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar localvar counter : integer ; counter counter  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR ( 2 , 3 ) ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar localvar counter : integer ; counter counter =  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR ( 2 , 3 ) ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar localvar counter : integer ; counter counter = 1  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR ( 2 , 3 ) ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar localvar counter : integer ; counter counter = 1 ;  
Comment: -  3.1 
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR ( 2 , 3 ) ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar localvar counter : integer ; counter counter = 1 ; while while  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR ( 2 , 3 ) ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar localvar counter : integer ; counter counter = 1 ; while while (  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR ( 2 , 3 ) ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar localvar counter : integer ; counter counter = 1 ; while while ( counter  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR ( 2 , 3 ) ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar localvar counter : integer ; counter counter = 1 ; while while ( counter <=  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR ( 2 , 3 ) ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar localvar counter : integer ; counter counter = 1 ; while while ( counter <= 10  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR ( 2 , 3 ) ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar localvar counter : integer ; counter counter = 1 ; while while ( counter <= 10 )  
Comment: -  3.3, 5.1  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR ( 2 , 3 ) ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar localvar counter : integer ; counter counter = 1 ; while while ( counter <= 10 ) { {  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR ( 2 , 3 ) ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar localvar counter : integer ; counter counter = 1 ; while while ( counter <= 10 ) { { write  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR ( 2 , 3 ) ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar localvar counter : integer ; counter counter = 1 ; while while ( counter <= 10 ) { { write (  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR ( 2 , 3 ) ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar localvar counter : integer ; counter counter = 1 ; while while ( counter <= 10 ) { { write ( counter  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR ( 2 , 3 ) ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar localvar counter : integer ; counter counter = 1 ; while while ( counter <= 10 ) { { write ( counter )  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR ( 2 , 3 ) ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar localvar counter : integer ; counter counter = 1 ; while while ( counter <= 10 ) { { write ( counter ) ;  
Comment: -  3.4 
Comment: -    write(f1.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4 
Comment: -    write(f2.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4 
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR ( 2 , 3 ) ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar localvar counter : integer ; counter counter = 1 ; while while ( counter <= 10 ) { { write ( counter ) ;    write(f1.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4    write(f2.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4 counter counter  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR ( 2 , 3 ) ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar localvar counter : integer ; counter counter = 1 ; while while ( counter <= 10 ) { { write ( counter ) ;    write(f1.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4    write(f2.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4 counter counter =  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR ( 2 , 3 ) ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar localvar counter : integer ; counter counter = 1 ; while while ( counter <= 10 ) { { write ( counter ) ;    write(f1.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4    write(f2.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4 counter counter = counter  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR ( 2 , 3 ) ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar localvar counter : integer ; counter counter = 1 ; while while ( counter <= 10 ) { { write ( counter ) ;    write(f1.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4    write(f2.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4 counter counter = counter +  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR ( 2 , 3 ) ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar localvar counter : integer ; counter counter = 1 ; while while ( counter <= 10 ) { { write ( counter ) ;    write(f1.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4    write(f2.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4 counter counter = counter + 1  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR ( 2 , 3 ) ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar localvar counter : integer ; counter counter = 1 ; while while ( counter <= 10 ) { { write ( counter ) ;    write(f1.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4    write(f2.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4 counter counter = counter + 1 ;  
Comment: -  3.1 
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR ( 2 , 3 ) ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar localvar counter : integer ; counter counter = 1 ; while while ( counter <= 10 ) { { write ( counter ) ;    write(f1.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4    write(f2.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4 counter counter = counter + 1 ; } }  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR ( 2 , 3 ) ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar localvar counter : integer ; counter counter = 1 ; while while ( counter <= 10 ) { { write ( counter ) ;    write(f1.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4    write(f2.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4 counter counter = counter + 1 ; } } ;  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR ( 2 , 3 ) ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar localvar counter : integer ; counter counter = 1 ; while while ( counter <= 10 ) { { write ( counter ) ;    write(f1.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4    write(f2.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4 counter counter = counter + 1 ; } } ; write  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR ( 2 , 3 ) ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar localvar counter : integer ; counter counter = 1 ; while while ( counter <= 10 ) { { write ( counter ) ;    write(f1.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4    write(f2.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4 counter counter = counter + 1 ; } } ; write (  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR ( 2 , 3 ) ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar localvar counter : integer ; counter counter = 1 ; while while ( counter <= 10 ) { { write ( counter ) ;    write(f1.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4    write(f2.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4 counter counter = counter + 1 ; } } ; write ( f1  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR ( 2 , 3 ) ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar localvar counter : integer ; counter counter = 1 ; while while ( counter <= 10 ) { { write ( counter ) ;    write(f1.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4    write(f2.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4 counter counter = counter + 1 ; } } ; write ( f1 .  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR ( 2 , 3 ) ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar localvar counter : integer ; counter counter = 1 ; while while ( counter <= 10 ) { { write ( counter ) ;    write(f1.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4    write(f2.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4 counter counter = counter + 1 ; } } ; write ( f1 . evaluate  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR ( 2 , 3 ) ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar localvar counter : integer ; counter counter = 1 ; while while ( counter <= 10 ) { { write ( counter ) ;    write(f1.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4    write(f2.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4 counter counter = counter + 1 ; } } ; write ( f1 . evaluate (  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR ( 2 , 3 ) ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar localvar counter : integer ; counter counter = 1 ; while while ( counter <= 10 ) { { write ( counter ) ;    write(f1.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4    write(f2.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4 counter counter = counter + 1 ; } } ; write ( f1 . evaluate ( counter  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR ( 2 , 3 ) ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar localvar counter : integer ; counter counter = 1 ; while while ( counter <= 10 ) { { write ( counter ) ;    write(f1.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4    write(f2.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4 counter counter = counter + 1 ; } } ; write ( f1 . evaluate ( counter )  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR ( 2 , 3 ) ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar localvar counter : integer ; counter counter = 1 ; while while ( counter <= 10 ) { { write ( counter ) ;    write(f1.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4    write(f2.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4 counter counter = counter + 1 ; } } ; write ( f1 . evaluate ( counter ) )  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR ( 2 , 3 ) ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar localvar counter : integer ; counter counter = 1 ; while while ( counter <= 10 ) { { write ( counter ) ;    write(f1.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4    write(f2.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4 counter counter = counter + 1 ; } } ; write ( f1 . evaluate ( counter ) ) ;  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { { return ( 0 ) ; } } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; Using Horner's method result result = a ; result result = result * x + b ; result result = result * x + c ; return return ( result ) ; } } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { { self . a = A ; self self . b = B ; self self . c = C ; } } function LINEAR :: constructor ( A : integer , B : integer ) { { self . a = A ; self self . b = B ; } } function LINEAR :: evaluate ( x : integer ) => integer { { localvar result : integer ; result result = 0 ; result result = a * x + b ; return return ( result ) ; } } function function main ( ) => void { { localvar f1 : LINEAR ( 2 , 3 ) ; localvar localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar localvar counter : integer ; counter counter = 1 ; while while ( counter <= 10 ) { { write ( counter ) ;    write(f1.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4    write(f2.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4 counter counter = counter + 1 ; } } ; write ( f1 . evaluate ( counter ) ) ; }  
