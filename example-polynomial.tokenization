class  
class POLYNOMIAL  
class POLYNOMIAL {  
class POLYNOMIAL { public  
class POLYNOMIAL { public function  
class POLYNOMIAL { public function evaluate  
class POLYNOMIAL { public function evaluate :  
class POLYNOMIAL { public function evaluate : (  
class POLYNOMIAL { public function evaluate : ( x  
class POLYNOMIAL { public function evaluate : ( x :  
class POLYNOMIAL { public function evaluate : ( x : float  
class POLYNOMIAL { public function evaluate : ( x : float )  
class POLYNOMIAL { public function evaluate : ( x : float ) =>  
class POLYNOMIAL { public function evaluate : ( x : float ) => float  
class POLYNOMIAL { public function evaluate : ( x : float ) => float ;  
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; }  
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ;  
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; function  
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL  
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL ::  
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate  
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate (  
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x  
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x :  
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float  
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float )  
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) =>  
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float  
Comment: -  2.1, 2.2 
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { {  
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { { return  
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { { return (  
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { { return ( 0.0  
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { { return ( 0.0 )  
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { { return ( 0.0 ) ;  
Comment: -  2.3 
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { { return ( 0.0 ) ; } }  
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { { return ( 0.0 ) ; } } function  
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { { return ( 0.0 ) ; } } function main  
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { { return ( 0.0 ) ; } } function main (  
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { { return ( 0.0 ) ; } } function main ( )  
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { { return ( 0.0 ) ; } } function main ( ) =>  
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { { return ( 0.0 ) ; } } function main ( ) => void  
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { { return ( 0.0 ) ; } } function main ( ) => void {  
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { { return ( 0.0 ) ; } } function main ( ) => void { localvar  
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { { return ( 0.0 ) ; } } function main ( ) => void { localvar x  
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { { return ( 0.0 ) ; } } function main ( ) => void { localvar x :  
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { { return ( 0.0 ) ; } } function main ( ) => void { localvar x : integer  
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { { return ( 0.0 ) ; } } function main ( ) => void { localvar x : integer [  
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { { return ( 0.0 ) ; } } function main ( ) => void { localvar x : integer [ 3  
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { { return ( 0.0 ) ; } } function main ( ) => void { localvar x : integer [ 3 ]  
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { { return ( 0.0 ) ; } } function main ( ) => void { localvar x : integer [ 3 ] [  
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { { return ( 0.0 ) ; } } function main ( ) => void { localvar x : integer [ 3 ] [ 2  
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { { return ( 0.0 ) ; } } function main ( ) => void { localvar x : integer [ 3 ] [ 2 ]  
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { { return ( 0.0 ) ; } } function main ( ) => void { localvar x : integer [ 3 ] [ 2 ] ;  
Comment: -  1.1 
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { { return ( 0.0 ) ; } } function main ( ) => void { localvar x : integer [ 3 ] [ 2 ] ; localvar localvar  
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { { return ( 0.0 ) ; } } function main ( ) => void { localvar x : integer [ 3 ] [ 2 ] ; localvar localvar y  
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { { return ( 0.0 ) ; } } function main ( ) => void { localvar x : integer [ 3 ] [ 2 ] ; localvar localvar y :  
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { { return ( 0.0 ) ; } } function main ( ) => void { localvar x : integer [ 3 ] [ 2 ] ; localvar localvar y : integer  
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { { return ( 0.0 ) ; } } function main ( ) => void { localvar x : integer [ 3 ] [ 2 ] ; localvar localvar y : integer ;  
Comment: -  1.1 
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { { return ( 0.0 ) ; } } function main ( ) => void { localvar x : integer [ 3 ] [ 2 ] ; localvar localvar y : integer ; localvar localvar  
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { { return ( 0.0 ) ; } } function main ( ) => void { localvar x : integer [ 3 ] [ 2 ] ; localvar localvar y : integer ; localvar localvar z  
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { { return ( 0.0 ) ; } } function main ( ) => void { localvar x : integer [ 3 ] [ 2 ] ; localvar localvar y : integer ; localvar localvar z :  
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { { return ( 0.0 ) ; } } function main ( ) => void { localvar x : integer [ 3 ] [ 2 ] ; localvar localvar y : integer ; localvar localvar z : integer  
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { { return ( 0.0 ) ; } } function main ( ) => void { localvar x : integer [ 3 ] [ 2 ] ; localvar localvar y : integer ; localvar localvar z : integer ;  
Comment: -  1.1 
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { { return ( 0.0 ) ; } } function main ( ) => void { localvar x : integer [ 3 ] [ 2 ] ; localvar localvar y : integer ; localvar localvar z : integer ; x x  
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { { return ( 0.0 ) ; } } function main ( ) => void { localvar x : integer [ 3 ] [ 2 ] ; localvar localvar y : integer ; localvar localvar z : integer ; x x =  
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { { return ( 0.0 ) ; } } function main ( ) => void { localvar x : integer [ 3 ] [ 2 ] ; localvar localvar y : integer ; localvar localvar z : integer ; x x = 1  
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { { return ( 0.0 ) ; } } function main ( ) => void { localvar x : integer [ 3 ] [ 2 ] ; localvar localvar y : integer ; localvar localvar z : integer ; x x = 1 ;  
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { { return ( 0.0 ) ; } } function main ( ) => void { localvar x : integer [ 3 ] [ 2 ] ; localvar localvar y : integer ; localvar localvar z : integer ; x x = 1 ; x  
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { { return ( 0.0 ) ; } } function main ( ) => void { localvar x : integer [ 3 ] [ 2 ] ; localvar localvar y : integer ; localvar localvar z : integer ; x x = 1 ; x =  
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { { return ( 0.0 ) ; } } function main ( ) => void { localvar x : integer [ 3 ] [ 2 ] ; localvar localvar y : integer ; localvar localvar z : integer ; x x = 1 ; x = y  
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { { return ( 0.0 ) ; } } function main ( ) => void { localvar x : integer [ 3 ] [ 2 ] ; localvar localvar y : integer ; localvar localvar z : integer ; x x = 1 ; x = y ;  
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { { return ( 0.0 ) ; } } function main ( ) => void { localvar x : integer [ 3 ] [ 2 ] ; localvar localvar y : integer ; localvar localvar z : integer ; x x = 1 ; x = y ; read  
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { { return ( 0.0 ) ; } } function main ( ) => void { localvar x : integer [ 3 ] [ 2 ] ; localvar localvar y : integer ; localvar localvar z : integer ; x x = 1 ; x = y ; read (  
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { { return ( 0.0 ) ; } } function main ( ) => void { localvar x : integer [ 3 ] [ 2 ] ; localvar localvar y : integer ; localvar localvar z : integer ; x x = 1 ; x = y ; read ( x  
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { { return ( 0.0 ) ; } } function main ( ) => void { localvar x : integer [ 3 ] [ 2 ] ; localvar localvar y : integer ; localvar localvar z : integer ; x x = 1 ; x = y ; read ( x )  
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { { return ( 0.0 ) ; } } function main ( ) => void { localvar x : integer [ 3 ] [ 2 ] ; localvar localvar y : integer ; localvar localvar z : integer ; x x = 1 ; x = y ; read ( x ) ;  
Comment: -  y = 1 + 2 * 3;                                   // 3.1, 5.1 
Comment: -  read(x);                                         // 3.4 
Comment: -  if (x > y + 10)                                  // 3.2, 5.1    
Comment: -  then		 
Comment: -    write(x+10);                                   // 3.4, 5.1  
Comment: - else 
Comment: -    write(x+1);                                    // 3.4, 5.1 
Comment: - ; 
Comment: - z = 0;                                           // 3.1 
Comment: -  while(z<=10) {                                   // 3.3, 5.1 
Comment: -   write(z);                                      // 3.4 
Comment: -   z = z + 1;                                     // 3.1 
Comment: -  };  
class POLYNOMIAL { public function evaluate : ( x : float ) => float ; } ; function POLYNOMIAL :: evaluate ( x : float ) => float { { return ( 0.0 ) ; } } function main ( ) => void { localvar x : integer [ 3 ] [ 2 ] ; localvar localvar y : integer ; localvar localvar z : integer ; x x = 1 ; x = y ; read ( x ) ;  read(x);                                         // 3.4  if (x > y + 10)                                  // 3.2, 5.1     then		    write(x+10);                                   // 3.4, 5.1  else    write(x+1);                                    // 3.4, 5.1 ; z = 0;                                           // 3.1  while(z<=10) {                                   // 3.3, 5.1   write(z);                                      // 3.4   z = z + 1;                                     // 3.1  };  } }  
