
// ====== struct declarations ====== //
class POLYNOMIAL {
  public function evaluate: (x: integer) => integer;                    
};

class LINEAR isa POLYNOMIAL {
  private attribute a: integer;
  private attribute b: integer;
  public  constructor: (A: integer, B: integer);
  public  function evaluate: (x: integer) => integer;
};

class QUADRATIC isa POLYNOMIAL {
  private attribute a: integer;
  private attribute b: integer;
  private attribute c: integer;
  public  constructor: (A: integer, B: integer, C: integer);
  public  function evaluate: (x: integer) => integer;
};

// ====== member function implementations ====== //  
function POLYNOMIAL::evaluate(x: integer) => integer                  // 2.1, 2.2
{
  return (0);                                                   // 2.3
}

function QUADRATIC::evaluate(x: integer) => integer
{
  localvar result: integer;                                         // 1.1
    //Using Horner's method
    result = a;                                                   // 3.1       
    result = result * x + b;                                      // 3.1, 5.1
    result = result * x + c;                                      // 3.1, 5.1
    return (result);                                              // 2.3
}

function QUADRATIC::constructor(A: integer, B: integer, C: integer)     // 2.1, 2.2
{
  self.a = A;                                                     // 3.1, 5.3
  self.b = B;                                                     // 3.1, 5.3
  self.c = C;                                                     // 3.1, 5.3
}

function LINEAR::constructor(A: integer, B: integer)                  // 2.1, 2.2
{
  self.a = A;                                                     // 3.1, 5.3
  self.b = B;                                                     // 3.1, 5.3
}

function LINEAR::evaluate(x: integer) => integer                      // 2.1, 2.2
{
  localvar result: integer;                                         // 1.1
    result = 0;                                                 // 3.1
    result = a * x + b;                                           // 3.1, 5.1
    return (result);                                              // 2.3
  }
 
// ====== main ====== //
function main() => void                                           // 2.1, 2.2
{
  localvar f1: LINEAR(2, 3);                                    // 1.3, 2.1, 2.2, 2.4
  localvar f2: QUADRATIC(-2, 1, 0);                         // 1.3, 2.1, 2.2, 2.4
  localvar counter: integer;                                        // 1.1

  counter = 1;                                                    // 3.1
	
  while(counter <= 10)                                            // 3.3, 5.1 
  {
    write(counter);                                               // 3.4
 //   write(f1.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4
 //   write(f2.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4
    counter = counter + 1;                                        // 3.1
  };
  write(f1.evaluate(counter));
}
