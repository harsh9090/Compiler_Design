[inlinecmt,  ====== struct declarations ====== //, 1], 
[class, class, 4], [id, LINEAR, 4], [isa, isa, 4], [id, POLYNOMIAL, 4], [Opencubr, {, 4], 
[private, private, 5], [attribute, attribute, 5], [id, a, 5], [Colon, :, 5], [float, float, 5], [Semi, ;, 5], 
[private, private, 6], [attribute, attribute, 6], [id, b, 6], [Colon, :, 6], [float, float, 6], [Semi, ;, 6], 
[Closecubr, }, 8], [Semi, ;, 8], 
[class, class, 10], [id, QUADRATIC, 10], [isa, isa, 10], [id, POLYNOMIAL, 10], [Opencubr, {, 10], 
[private, private, 11], [attribute, attribute, 11], [id, a, 11], [Colon, :, 11], [float, float, 11], [Semi, ;, 11], 
[private, private, 12], [attribute, attribute, 12], [id, b, 12], [Colon, :, 12], [float, float, 12], [Semi, ;, 12], 
[private, private, 13], [attribute, attribute, 13], [id, c, 13], [Colon, :, 13], [float, float, 13], [Semi, ;, 13], 
[public, public, 14], [constructor, constructor, 14], [Colon, :, 14], [Openpar, (, 14], [id, A, 14], [Colon, :, 14], [float, float, 14], [Comma, ,, 14], [id, B, 14], [Colon, :, 14], [float, float, 14], [Comma, ,, 14], [id, C, 14], [Colon, :, 14], [float, float, 14], [Closepar, ), 14], [Semi, ;, 14], 
[public, public, 15], [function, function, 15], [id, evaluate, 15], [Colon, :, 15], [Openpar, (, 15], [id, x, 15], [Colon, :, 15], [float, float, 15], [Closepar, ), 15], [arrow, =>, 15], [float, float, 15], [Semi, ;, 15], 
[Closecubr, }, 16], [Semi, ;, 16], 
[inlinecmt,  ====== member function implementations ====== //  , 18], 
[function, function, 19], [id, POLYNOMIAL, 19], [sr, ::, 19], [id, evaluate, 19], [Openpar, (, 19], [id, x, 19], [Colon, :, 19], [float, float, 19], [Closepar, ), 19], [arrow, =>, 19], [float, float, 19], 
[Opencubr, {, 20], 
[return, return, 21], [Openpar, (, 21], [intLit, 0, 21], [Closepar, ), 21], [Semi, ;, 21], 
[Closecubr, }, 22], 
[function, function, 24], [id, QUADRATIC, 24], [sr, ::, 24], [id, evaluate, 24], [Openpar, (, 24], [id, x, 24], [Colon, :, 24], [float, float, 24], [Closepar, ), 24], [arrow, =>, 24], [float, float, 24], 
[Opencubr, {, 25], 
[localvar, localvar, 26], [id, result, 26], [Colon, :, 26], [float, float, 26], [Semi, ;, 26], 
[inlinecmt, Using Horner's method, 27], 
[id, result, 28], [assign, =, 28], [id, a, 28], [Semi, ;, 28], 
[id, result, 29], [assign, =, 29], [id, result, 29], [Mult, *, 29], [id, x, 29], [Plus, +, 29], [id, b, 29], [Semi, ;, 29], 
[id, result, 30], [assign, =, 30], [id, result, 30], [Mult, *, 30], [id, x, 30], [Plus, +, 30], [id, c, 30], [Semi, ;, 30], 
[return, return, 31], [Openpar, (, 31], [id, result, 31], [Closepar, ), 31], [Semi, ;, 31], 
[Closecubr, }, 32], 
[function, function, 34], [id, QUADRATIC, 34], [sr, ::, 34], [constructor, constructor, 34], [Openpar, (, 34], [id, A, 34], [Colon, :, 34], [float, float, 34], [Comma, ,, 34], [id, B, 34], [Colon, :, 34], [float, float, 34], [Comma, ,, 34], [id, C, 34], [Colon, :, 34], [float, float, 34], [Closepar, ), 34], 
[Opencubr, {, 35], 
[id, sel, 36], [dot, ., 36], [id, a, 36], [assign, =, 36], [id, A, 36], [Semi, ;, 36], 
[id, sel, 37], [dot, ., 37], [id, b, 37], [assign, =, 37], [id, B, 37], [Semi, ;, 37], 
[id, sel, 38], [dot, ., 38], [id, c, 38], [assign, =, 38], [id, C, 38], [Semi, ;, 38], 
[Closecubr, }, 39], 
[function, function, 41], [id, LINEAR, 41], [sr, ::, 41], [constructor, constructor, 41], [Openpar, (, 41], [id, A, 41], [Colon, :, 41], [float, float, 41], [Comma, ,, 41], [id, B, 41], [Colon, :, 41], [float, float, 41], [Closepar, ), 41], 
[Opencubr, {, 42], 
[id, sel, 43], [dot, ., 43], [id, a, 43], [assign, =, 43], [id, A, 43], [Semi, ;, 43], 
[id, sel, 44], [dot, ., 44], [id, b, 44], [assign, =, 44], [id, B, 44], [Semi, ;, 44], 
[Closecubr, }, 45], 
[function, function, 47], [id, LINEAR, 47], [sr, ::, 47], [id, evaluate, 47], [Openpar, (, 47], [id, x, 47], [Colon, :, 47], [float, float, 47], [Closepar, ), 47], [arrow, =>, 47], [float, float, 47], 
[Opencubr, {, 48], 
[localvar, localvar, 49], [id, result, 49], [Colon, :, 49], [float, float, 49], [Semi, ;, 49], 
[id, result, 50], [assign, =, 50], [floatLit, 0.0, 50], [Semi, ;, 50], 
[id, result, 51], [assign, =, 51], [id, a, 51], [Mult, *, 51], [id, x, 51], [Plus, +, 51], [id, b, 51], [Semi, ;, 51], 
[return, return, 52], [Openpar, (, 52], [id, result, 52], [Closepar, ), 52], [Semi, ;, 52], 
[Closecubr, }, 53], 
[inlinecmt,  ====== main ====== //, 55], 
[Blockcmt,     classes    --------------------------------------| | no class declaration| | class declaration|X| multiple class declarations|X| no data member declaration|X| data member declaration|X| multiple data member declaration| | no member function declaration|X| member function declaration|X| multiple member function declaration| | no member|X| no inherited class|X| one inherited class| | multiple inherited classes|X| private member specifier|X| public member specifier    functions: definitions    --------------------------------------| | no main function definition|X| main function definition|X| no free function definition| | free function definition| | multiple free function definitions| | no member function definition|X| member function definition|X| multiple member function definitions| | return type: void| | return type: integer|X| return type: float|X| return type: id| | return type: array (not allowed)    functions: formal parameters    --------------------------------------| | type: integer|X| type: float| | type: id| | type: 1-dim array | | type: n-dim array| | type: array (with size)| | type: array (without size)    functions: calls    --------------------------------------| | free function call|X| member function call| | parameters:0|X| parameters:1|X| parameters:n| | array parameter - 1-dim| | array parameter - n-dim| | array parameter - with size| | array parameter - without size| | function call as statement|X| function call as expression factor| | expression as parameter    variable declaration    --------------------------------------| | type: integer| | type: float| | type: string|X| type: id| | type: 1-dim array | | type: n-dim array| | type: array (with size)| | type: array (without size)    function body: local variable declarations    --------------------------------------| | no local variable declarations|X| local variable declarations| | intertwined statements and variable declarations    function body: statements    --------------------------------------| | no statement| | 1 statement|X| n statements| | if statement| | if: empty then or else blocks| | if: 1-statement then or else blocks| | if: n-statements then or else blocks|X| while statement| | while: empty block| | while: 1-statement block|X| while: n-statement block| | read(<variable>) statement|X| write(<expr>) statement|X| return(<expr>) statement|X| assignment statement    variable + idnest    --------------------------------------|X| id|X| id.id|X| id.id(id)| | id(id).id| | id(id).id()| | id.id[id]| | id[id].id| | id[id].id[id]| | id.id[id][id]| | id[id][id].id| | id[id][id].id[id][id]| | id(id).id[id]| | id(id).id[id][id]| | expression as array index    expressions    --------------------------------------| | single variable| | involving addop| | involving multop| | involving relop|X| involving addop + multop| | involving multop + relop| | involving addop + multop + relop| | involving parentheses| | involving nested parenhteses| | involving not| | involving sign| | involving literals|X| involving variable + idnest|X| involving function calls| | involving all the above in one expression*, 57], 