[inlinecmt,  ====== struct declarations ====== //, 1], 
[class, class, 2], [id, POLYNOMIAL, 2], [Opencubr, {, 2], 
[public, public, 3], [function, function, 3], [id, evaluate, 3], [Colon, :, 3], [Openpar, (, 3], [id, x, 3], [Colon, :, 3], [float, float, 3], [Closepar, ), 3], [arrow, =>, 3], [float, float, 3], [Semi, ;, 3], 
[Closecubr, }, 4], [Semi, ;, 4], 
[class, class, 6], [id, LINEAR, 6], [isa, isa, 6], [id, POLYNOMIAL, 6], [Opencubr, {, 6], 
[private, private, 7], [attribute, attribute, 7], [id, a, 7], [Colon, :, 7], [float, float, 7], [Semi, ;, 7], 
[private, private, 8], [attribute, attribute, 8], [id, b, 8], [Colon, :, 8], [float, float, 8], [Semi, ;, 8], 
[public, public, 9], [constructor, constructor, 9], [Colon, :, 9], [Openpar, (, 9], [id, A, 9], [Colon, :, 9], [float, float, 9], [Comma, ,, 9], [id, B, 9], [Colon, :, 9], [float, float, 9], [Closepar, ), 9], [Semi, ;, 9], 
[public, public, 10], [function, function, 10], [id, evaluate, 10], [Colon, :, 10], [Openpar, (, 10], [id, x, 10], [Colon, :, 10], [float, float, 10], [Closepar, ), 10], [arrow, =>, 10], [float, float, 10], [Semi, ;, 10], 
[Closecubr, }, 11], [Semi, ;, 11], 
[class, class, 13], [id, QUADRATIC, 13], [isa, isa, 13], [id, POLYNOMIAL, 13], [Opencubr, {, 13], 
[private, private, 14], [attribute, attribute, 14], [id, a, 14], [Colon, :, 14], [float, float, 14], [Semi, ;, 14], 
[private, private, 15], [attribute, attribute, 15], [id, b, 15], [Colon, :, 15], [float, float, 15], [Semi, ;, 15], 
[private, private, 16], [attribute, attribute, 16], [id, c, 16], [Colon, :, 16], [float, float, 16], [Semi, ;, 16], 
[public, public, 17], [constructor, constructor, 17], [Colon, :, 17], [Openpar, (, 17], [id, A, 17], [Colon, :, 17], [float, float, 17], [Comma, ,, 17], [id, B, 17], [Colon, :, 17], [float, float, 17], [Comma, ,, 17], [id, C, 17], [Colon, :, 17], [float, float, 17], [Closepar, ), 17], [Semi, ;, 17], 
[public, public, 18], [function, function, 18], [id, evaluate, 18], [Colon, :, 18], [Openpar, (, 18], [id, x, 18], [Colon, :, 18], [float, float, 18], [Closepar, ), 18], [arrow, =>, 18], [float, float, 18], [Semi, ;, 18], 
[Closecubr, }, 19], [Semi, ;, 19], 
[inlinecmt,  ====== member function implementations ====== //  , 21], 
[function, function, 24], [id, QUADRATIC, 24], [sr, ::, 24], [id, evaluate, 24], [Openpar, (, 24], [id, x, 24], [Colon, :, 24], [float, float, 24], [Closepar, ), 24], [arrow, =>, 24], [float, float, 24], 
[Opencubr, {, 25], 
[localvar, localvar, 26], [id, result, 26], [Colon, :, 26], [float, float, 26], [Semi, ;, 26], 
[inlinecmt, Using Horner's method, 27], 
[id, result, 28], [assign, =, 28], [id, a, 28], [Semi, ;, 28], 
[id, result, 29], [assign, =, 29], [id, result, 29], [Mult, *, 29], [id, x, 29], [Plus, +, 29], [id, b, 29], [Semi, ;, 29], 
[id, result, 30], [assign, =, 30], [id, result, 30], [Mult, *, 30], [id, x, 30], [Plus, +, 30], [id, c, 30], [Semi, ;, 30], 
[return, return, 31], [Openpar, (, 31], [id, result, 31], [Closepar, ), 31], [Semi, ;, 31], 
[Closecubr, }, 32], 
[function, function, 34], [id, QUADRATIC, 34], [sr, ::, 34], [constructor, constructor, 34], [Openpar, (, 34], [id, A, 34], [Colon, :, 34], [float, float, 34], [Comma, ,, 34], [id, B, 34], [Colon, :, 34], [float, float, 34], [Comma, ,, 34], [id, C, 34], [Colon, :, 34], [float, float, 34], [Closepar, ), 34], 
[Opencubr, {, 35], 
[id, selfa, 36], [dot, ., 36], [id, a, 36], [assign, =, 36], [id, A, 36], [Semi, ;, 36], 
[id, selfa, 37], [dot, ., 37], [id, b, 37], [assign, =, 37], [id, B, 37], [Semi, ;, 37], 
[id, selfa, 38], [dot, ., 38], [id, c, 38], [assign, =, 38], [id, C, 38], [Semi, ;, 38], 
[Closecubr, }, 39], 
[function, function, 41], [id, LINEAR, 41], [sr, ::, 41], [constructor, constructor, 41], [Openpar, (, 41], [id, A, 41], [Colon, :, 41], [float, float, 41], [Comma, ,, 41], [id, B, 41], [Colon, :, 41], [float, float, 41], [Closepar, ), 41], 
[Opencubr, {, 42], 
[id, selfa, 43], [dot, ., 43], [id, a, 43], [assign, =, 43], [id, A, 43], [Semi, ;, 43], 
[id, selfa, 44], [dot, ., 44], [id, b, 44], [assign, =, 44], [id, B, 44], [Semi, ;, 44], 
[Closecubr, }, 45], 
[function, function, 47], [id, LINEAR, 47], [sr, ::, 47], [id, evaluate, 47], [Openpar, (, 47], [id, x, 47], [Colon, :, 47], [float, float, 47], [Closepar, ), 47], [arrow, =>, 47], [float, float, 47], 
[Opencubr, {, 48], 
[localvar, localvar, 49], [id, result, 49], [Colon, :, 49], [float, float, 49], [Semi, ;, 49], 
[id, result, 50], [assign, =, 50], [floatLit, 0.0, 50], [Semi, ;, 50], 
[id, result, 51], [assign, =, 51], [id, a, 51], [Mult, *, 51], [Openpar, (, 51], [id, x, 51], [Plus, +, 51], [id, b, 51], [Closepar, ), 51], [Semi, ;, 51], 
[return, return, 52], [Openpar, (, 52], [id, result, 52], [Closepar, ), 52], [Semi, ;, 52], 
[Closecubr, }, 53], 
[inlinecmt,  ====== main ====== //, 55], 
[function, function, 56], [id, main, 56], [Openpar, (, 56], [Closepar, ), 56], [arrow, =>, 56], [void, void, 56], 
[Opencubr, {, 57], 
[localvar, localvar, 58], [id, f1, 58], [Colon, :, 58], [id, LINEAR, 58], [Openpar, (, 58], [intLit, 2, 58], [Comma, ,, 58], [floatLit, 3.5, 58], [Closepar, ), 58], [Semi, ;, 58], 
[localvar, localvar, 59], [id, f2, 59], [Colon, :, 59], [id, QUADRATIC, 59], [Openpar, (, 59], [Minus, -, 59], [floatLit, 2.0, 59], [Comma, ,, 59], [floatLit, 1.0, 59], [Comma, ,, 59], [floatLit, 0.0, 59], [Closepar, ), 59], [Semi, ;, 59], 
[localvar, localvar, 60], [id, counter, 60], [Colon, :, 60], [integer, integer, 60], [Semi, ;, 60], 
[id, counter, 62], [assign, =, 62], [intLit, 1, 62], [Semi, ;, 62], 
[while, while, 64], [Openpar, (, 64], [id, counter, 64], [leq, <=, 64], [intLit, 10, 64], [Closepar, ), 64], 
[Opencubr, {, 65], 
[write, write, 66], [Openpar, (, 66], [id, counter, 66], [Closepar, ), 66], [Semi, ;, 66], 
[write, write, 67], [Openpar, (, 67], [id, f1, 67], [dot, ., 67], [id, evaluate, 67], [Openpar, (, 67], [id, counter, 67], [Closepar, ), 67], [Closepar, ), 67], [Semi, ;, 67], 
[write, write, 68], [Openpar, (, 68], [id, f2, 68], [dot, ., 68], [id, evaluate, 68], [Openpar, (, 68], [id, counter, 68], [Closepar, ), 68], [Closepar, ), 68], [Semi, ;, 68], 
[Closecubr, }, 69], [Semi, ;, 69], 
[Closecubr, }, 70], 
[Blockcmt,     classes    --------------------------------------| | no class declaration| | class declaration|X| multiple class declarations|X| no data member declaration|X| data member declaration|X| multiple data member declaration| | no member function declaration|X| member function declaration|X| multiple member function declaration| | no member|X| no inherited class|X| one inherited class| | multiple inherited classes|X| private member specifier|X| public member specifier    functions: definitions    --------------------------------------| | no main function definition|X| main function definition|X| no free function definition| | free function definition| | multiple free function definitions| | no member function definition|X| member function definition|X| multiple member function definitions| | return type: void| | return type: integer|X| return type: float|X| return type: id| | return type: array (not allowed)    functions: formal parameters    --------------------------------------| | type: integer|X| type: float| | type: id| | type: 1-dim array | | type: n-dim array| | type: array (with size)| | type: array (without size)    functions: calls    --------------------------------------| | free function call|X| member function call| | parameters:0|X| parameters:1|X| parameters:n| | array parameter - 1-dim| | array parameter - n-dim| | array parameter - with size| | array parameter - without size| | function call as statement|X| function call as expression factor| | expression as parameter    variable declaration    --------------------------------------| | type: integer| | type: float| | type: string|X| type: id| | type: 1-dim array | | type: n-dim array| | type: array (with size)| | type: array (without size)    function body: local variable declarations    --------------------------------------| | no local variable declarations|X| local variable declarations| | intertwined statements and variable declarations    function body: statements    --------------------------------------| | no statement| | 1 statement|X| n statements| | if statement| | if: empty then or else blocks| | if: 1-statement then or else blocks| | if: n-statements then or else blocks|X| while statement| | while: empty block| | while: 1-statement block|X| while: n-statement block| | read(<variable>) statement|X| write(<expr>) statement|X| return(<expr>) statement|X| assignment statement    variable + idnest    --------------------------------------|X| id|X| id.id|X| id.id(id)| | id(id).id| | id(id).id()| | id.id[id]| | id[id].id| | id[id].id[id]| | id.id[id][id]| | id[id][id].id| | id[id][id].id[id][id]| | id(id).id[id]| | id(id).id[id][id]| | expression as array index    expressions    --------------------------------------| | single variable| | involving addop| | involving multop| | involving relop|X| involving addop + multop| | involving multop + relop| | involving addop + multop + relop| | involving parentheses| | involving nested parenhteses| | involving not| | involving sign| | involving literals|X| involving variable + idnest|X| involving function calls| | involving all the above in one expression*, 71], 