[Blockcmt,  sort the array *, 1], 
[function, function, 2], [id, bubbleSort, 2], [Openpar, (, 2], [id, arr, 2], [Colon, :, 2], [integer, integer, 2], [Opensqbr, [, 2], [intLit, 4, 2], [Closesqbr, ], 2], [Comma, ,, 2], [id, size, 2], [Colon, :, 2], [integer, integer, 2], [Closepar, ), 2], [arrow, =>, 2], [void, void, 2], 
[Opencubr, {, 3], 
[localvar, localvar, 4], [id, n, 4], [Colon, :, 4], [integer, integer, 4], [Semi, ;, 4], 
[localvar, localvar, 5], [id, i, 5], [Colon, :, 5], [integer, integer, 5], [Semi, ;, 5], 
[localvar, localvar, 6], [id, j, 6], [Colon, :, 6], [integer, integer, 6], [Semi, ;, 6], 
[localvar, localvar, 7], [id, temp, 7], [Colon, :, 7], [integer, integer, 7], [Semi, ;, 7], 
[id, n, 8], [assign, =, 8], [id, size, 8], [Semi, ;, 8], 
[id, i, 9], [assign, =, 9], [intLit, 0, 9], [Semi, ;, 9], 
[id, j, 10], [assign, =, 10], [intLit, 0, 10], [Semi, ;, 10], 
[id, temp, 11], [assign, =, 11], [intLit, 0, 11], [Semi, ;, 11], 
[while, while, 12], [Openpar, (, 12], [id, i, 12], [Lt, <, 12], [id, n, 12], [Minus, -, 12], [intLit, 1, 12], [Closepar, ), 12], [Opencubr, {, 12], 
[id, j, 13], [assign, =, 13], [intLit, 0, 13], [Semi, ;, 13], 
[while, while, 14], [Openpar, (, 14], [id, j, 14], [Lt, <, 14], [id, n, 14], [Minus, -, 14], [intLit, 1, 14], [Closepar, ), 14], [Opencubr, {, 14], 
[if, if, 15], [Openpar, (, 15], [id, arr, 15], [Opensqbr, [, 15], [id, j, 15], [Closesqbr, ], 15], [gt, >, 15], [id, arr, 15], [Opensqbr, [, 15], [id, j, 15], [Plus, +, 15], [intLit, 1, 15], [Closesqbr, ], 15], [Closepar, ), 15], 
[then, then, 16], [Opencubr, {, 16], 
[inlinecmt,  swap temp and arr[i], 17], 
[id, temp, 18], [assign, =, 18], [id, arr, 18], [Opensqbr, [, 18], [id, j, 18], [Closesqbr, ], 18], [Semi, ;, 18], 
[id, arr, 19], [Opensqbr, [, 19], [id, j, 19], [Closesqbr, ], 19], [assign, =, 19], [id, arr, 19], [Opensqbr, [, 19], [id, j, 19], [Plus, +, 19], [intLit, 1, 19], [Closesqbr, ], 19], [Semi, ;, 19], 
[id, arr, 20], [Opensqbr, [, 20], [id, j, 20], [Plus, +, 20], [intLit, 1, 20], [Closesqbr, ], 20], [assign, =, 20], [id, temp, 20], [Semi, ;, 20], 
[Closecubr, }, 21], [else, else, 21], [Semi, ;, 21], 
[id, j, 22], [assign, =, 22], [id, j, 22], [Plus, +, 22], [intLit, 1, 22], [Semi, ;, 22], 
[Closecubr, }, 23], [Semi, ;, 23], 
[id, i, 24], [assign, =, 24], [id, i, 24], [Plus, +, 24], [intLit, 1, 24], [Semi, ;, 24], 
[Closecubr, }, 25], [Semi, ;, 25], 
[id, i, 26], [assign, =, 26], [intLit, 0, 26], [Semi, ;, 26], 
[while, while, 27], [Openpar, (, 27], [id, i, 27], [Lt, <, 27], [id, n, 27], [Closepar, ), 27], [Opencubr, {, 27], 
[write, write, 28], [Openpar, (, 28], [id, arr, 28], [Opensqbr, [, 28], [id, i, 28], [Closesqbr, ], 28], [Closepar, ), 28], [Semi, ;, 28], 
[id, i, 29], [assign, =, 29], [id, i, 29], [Plus, +, 29], [intLit, 1, 29], [Semi, ;, 29], 
[Closecubr, }, 30], [Semi, ;, 30], 
[Closecubr, }, 31], 
[inlinecmt,  main funtion to test above, 33], 
[function, function, 34], [id, main, 34], [Openpar, (, 34], [Closepar, ), 34], [arrow, =>, 34], [void, void, 34], 
[Opencubr, {, 35], 
[localvar, localvar, 36], [id, arr, 36], [Colon, :, 36], [integer, integer, 36], [Opensqbr, [, 36], [intLit, 4, 36], [Closesqbr, ], 36], [Semi, ;, 36], 
[id, arr, 37], [Opensqbr, [, 37], [intLit, 0, 37], [Closesqbr, ], 37], [assign, =, 37], [intLit, 34, 37], [Semi, ;, 37], 
[id, arr, 38], [Opensqbr, [, 38], [intLit, 1, 38], [Closesqbr, ], 38], [assign, =, 38], [intLit, 12, 38], [Semi, ;, 38], 
[id, arr, 39], [Opensqbr, [, 39], [intLit, 2, 39], [Closesqbr, ], 39], [assign, =, 39], [intLit, 25, 39], [Semi, ;, 39], 
[id, arr, 40], [Opensqbr, [, 40], [intLit, 3, 40], [Closesqbr, ], 40], [assign, =, 40], [intLit, 64, 40], [Semi, ;, 40], 
[id, bubbleSort, 41], [Openpar, (, 41], [id, arr, 41], [Opensqbr, [, 41], [intLit, 4, 41], [Closesqbr, ], 41], [Comma, ,, 41], [intLit, 4, 41], [Closepar, ), 41], [Semi, ;, 41], 
[Closecubr, }, 42], 
[Blockcmt,     classes    --------------------------------------|X| no class declaration| | class declaration| | multiple class declarations| | no data member declaration| | data member declaration| | multiple data member declaration| | no member function declaration| | member function declaration| | multiple member function declaration| | no member| | no inherited class| | one inherited class| | multiple inherited classes| | private member specifier| | public member specifier    functions: definitions    --------------------------------------| | no main function definition|X| main function definition| | no free function definition|X| free function definition|X| multiple free function definitions|X| no member function definition| | member function definition| | multiple member function definitions|X| return type: void| | return type: integer| | return type: float| | return type: id| | return type: array (not allowed)    functions: formal parameters    --------------------------------------|X| type: integer| | type: float| | type: id|X| type: 1-dim array | | type: n-dim array| | type: array (with size)|X| type: array (without size)    functions: calls    --------------------------------------|X| free function call| | member function call| | parameters:0| | parameters:1|X| parameters:n|X| array parameter - 1-dim| | array parameter - n-dim| | array parameter - with size| | array parameter - without size| | function call as statement| | function call as expression factor| | expression as parameter    variable declaration    --------------------------------------|X| type: integer| | type: float| | type: string| | type: id|X| type: 1-dim array | | type: n-dim array|X| type: array (with size)| | type: array (without size) (not allowed)    function body: local variable declarations    --------------------------------------| | no local variable declarations|X| local variable declarations| | intertwined statements and variable declarations    function body: statements    --------------------------------------| | no statement| | 1 statement|X| n statements|X| if statement|X| if: empty then or else blocks| | if: 1-statement then or else blocks|X| if: n-statements then or else blocks|X| while statement| | while: empty block| | while: 1-statement block|X| while: n-statement block| | read(<variable>) statement|X| write(<expr>) statement|X| return(<expr>) statement|X| assignment statement    variable + idnest    --------------------------------------|X| id| | id.id| | id.id(id)| | id(id).id| | id(id).id()| | id.id[id]| | id[id].id| | id[id].id[id]| | id.id[id][id]| | id[id][id].id| | id[id][id].id[id][id]| | id(id).id[id]| | id(id).id[id][id]| | expression as array index    expressions    --------------------------------------|X| single variable|X| involving addop| | involving multop|X| involving relop| | involving addop + multop|X| involving multop + relop| | involving addop + multop + relop| | involving parentheses| | involving nested parentheses| | involving not| | involving sign|X| involving literals| | involving variable + idnest|X| involving function calls| | involving all the above in one expression*, 44], 