[ inlinecmt ,  ====== struct declarations ====== // , 1 ], 
[ class , class , 2 ], [ id , POLYNOMIAL , 2 ], [ opencubr , { , 2 ], 
[ public , public , 3 ], [ function , function , 3 ], [ id , evaluate , 3 ], [ colon , :, 3 ], [ openpar, (, 3 ], [ id , x , 3 ], [ colon , :, 3 ], [ float , float , 3 ], [ closepar , ) , 3 ], [ retruntype , => , 3 ], [ float , float , 3 ], [ semi, ;, 3 ], 
[ closecubr , } , 4 ], [ semi, ;, 4 ], 
[ class , class , 5 ], [ id , LINEAR , 5 ], [ isa , isa , 5 ], [ id , POLYNOMIAL , 5 ], [ opencubr , { , 5 ], 
[ private , private , 6 ], [ attribute , attribute , 6 ], [ id , a , 6 ], [ colon , :, 6 ], [ float , float , 6 ], [ semi, ;, 6 ], 
[ private , private , 7 ], [ attribute , attribute , 7 ], [ id , b , 7 ], [ colon , :, 7 ], [ float , float , 7 ], [ semi, ;, 7 ], 
[ public , public , 8 ], [ constructor , constructor , 8 ], [ colon , :, 8 ], [ openpar, (, 8 ], [ id , A , 8 ], [ colon , :, 8 ], [ float , float , 8 ], [ comma , , , 8 ], [ id , B , 8 ], [ colon , :, 8 ], [ float , float , 8 ], [ closepar , ) , 8 ], [ semi, ;, 8 ], 
[ public , public , 9 ], [ function , function , 9 ], [ id , evaluate , 9 ], [ colon , :, 9 ], [ openpar, (, 9 ], [ id , x , 9 ], [ colon , :, 9 ], [ float , float , 9 ], [ closepar , ) , 9 ], [ retruntype , => , 9 ], [ float , float , 9 ], [ semi, ;, 9 ], 
[ closecubr , } , 10 ], [ semi, ;, 10 ], 
[ class , class , 11 ], [ id , QUADRATIC , 11 ], [ isa , isa , 11 ], [ id , POLYNOMIAL , 11 ], [ opencubr , { , 11 ], 
[ private , private , 12 ], [ attribute , attribute , 12 ], [ id , a , 12 ], [ colon , :, 12 ], [ float , float , 12 ], [ semi, ;, 12 ], 
[ private , private , 13 ], [ attribute , attribute , 13 ], [ id , b , 13 ], [ colon , :, 13 ], [ float , float , 13 ], [ semi, ;, 13 ], 
[ private , private , 14 ], [ attribute , attribute , 14 ], [ id , c , 14 ], [ colon , :, 14 ], [ float , float , 14 ], [ semi, ;, 14 ], 
[ public , public , 15 ], [ constructor , constructor , 15 ], [ colon , :, 15 ], [ openpar, (, 15 ], [ id , A , 15 ], [ colon , :, 15 ], [ float , float , 15 ], [ comma , , , 15 ], [ id , B , 15 ], [ colon , :, 15 ], [ float , float , 15 ], [ comma , , , 15 ], [ id , C , 15 ], [ colon , :, 15 ], [ float , float , 15 ], [ closepar , ) , 15 ], [ semi, ;, 15 ], 
[ public , public , 16 ], [ function , function , 16 ], [ id , evaluate , 16 ], [ colon , :, 16 ], [ openpar, (, 16 ], [ id , x , 16 ], [ colon , :, 16 ], [ float , float , 16 ], [ closepar , ) , 16 ], [ retruntype , => , 16 ], [ float , float , 16 ], [ semi, ;, 16 ], 
[ closecubr , } , 17 ], [ semi, ;, 17 ], 
[ inlinecmt ,  ====== member function implementations ====== //   , 18 ], 
[ function , function , 19 ], [ id , POLYNOMIAL , 19 ], [ scopeop , :: , 19 ], [ id , evaluate , 19 ], [ openpar, (, 19 ], [ id , x , 19 ], [ colon , :, 19 ], [ float , float , 19 ], [ closepar , ) , 19 ], [ retruntype , => , 19 ], [ float , float , 19 ], 
[ opencubr , { , 20 ], 
[ return , return , 21 ], [ openpar, (, 21 ], [ intnum , 0 , 21 ], [ closepar , ) , 21 ], [ semi, ;, 21 ], 
[ closecubr , } , 22 ], 
[ function , function , 24 ], [ id , QUADRATIC , 24 ], [ scopeop , :: , 24 ], [ id , evaluate , 24 ], [ openpar, (, 24 ], [ id , x , 24 ], [ colon , :, 24 ], [ float , float , 24 ], [ closepar , ) , 24 ], [ retruntype , => , 24 ], [ float , float , 24 ], 
[ opencubr , { , 25 ], 
[ localvar , localvar , 26 ], [ id , result , 26 ], [ colon , :, 26 ], [ float , float , 26 ], [ semi, ;, 26 ], 
[ inlinecmt , Using Horner's method , 27 ], 
[ id , result , 28 ], [ assign , = , 28 ], [ id , a , 28 ], [ semi, ;, 28 ], 
[ id , result , 29 ], [ assign , = , 29 ], [ id , result , 29 ], [ mult , * , 29 ], [ id , x , 29 ], [ plus, +, 29 ], [ id , b , 29 ], [ semi, ;, 29 ], 
[ id , result , 30 ], [ assign , = , 30 ], [ id , result , 30 ], [ mult , * , 30 ], [ id , x , 30 ], [ plus, +, 30 ], [ id , c , 30 ], [ semi, ;, 30 ], 
[ return , return , 31 ], [ openpar, (, 31 ], [ id , result , 31 ], [ closepar , ) , 31 ], [ semi, ;, 31 ], 
[ closecubr , } , 32 ], 
[ function , function , 34 ], [ id , QUADRATIC , 34 ], [ scopeop , :: , 34 ], [ constructor , constructor , 34 ], [ openpar, (, 34 ], [ id , A , 34 ], [ colon , :, 34 ], [ float , float , 34 ], [ comma , , , 34 ], [ id , B , 34 ], [ colon , :, 34 ], [ float , float , 34 ], [ comma , , , 34 ], [ id , C , 34 ], [ colon , :, 34 ], [ float , float , 34 ], [ closepar , ) , 34 ], 
[ opencubr , { , 35 ], 
[ self , self , 36 ], [ dot , . , 36 ], [ id , a , 36 ], [ assign , = , 36 ], [ id , A , 36 ], [ semi, ;, 36 ], 
[ self , self , 37 ], [ dot , . , 37 ], [ id , b , 37 ], [ assign , = , 37 ], [ id , B , 37 ], [ semi, ;, 37 ], 
[ self , self , 38 ], [ dot , . , 38 ], [ id , c , 38 ], [ assign , = , 38 ], [ id , C , 38 ], [ semi, ;, 38 ], 
[ closecubr , } , 39 ], 
[ function , function , 41 ], [ id , LINEAR , 41 ], [ scopeop , :: , 41 ], [ constructor , constructor , 41 ], [ openpar, (, 41 ], [ id , A , 41 ], [ colon , :, 41 ], [ float , float , 41 ], [ comma , , , 41 ], [ id , B , 41 ], [ colon , :, 41 ], [ float , float , 41 ], [ closepar , ) , 41 ], 
[ opencubr , { , 42 ], 
[ self , self , 43 ], [ dot , . , 43 ], [ id , a , 43 ], [ assign , = , 43 ], [ id , A , 43 ], [ semi, ;, 43 ], 
[ self , self , 44 ], [ dot , . , 44 ], [ id , b , 44 ], [ assign , = , 44 ], [ id , B , 44 ], [ semi, ;, 44 ], 
[ closecubr , } , 45 ], 
[ function , function , 47 ], [ id , LINEAR , 47 ], [ scopeop , :: , 47 ], [ id , evaluate , 47 ], [ openpar, (, 47 ], [ id , x , 47 ], [ colon , :, 47 ], [ float , float , 47 ], [ closepar , ) , 47 ], [ retruntype , => , 47 ], [ float , float , 47 ], 
[ opencubr , { , 48 ], 
[ localvar , localvar , 49 ], [ id , result , 49 ], [ colon , :, 49 ], [ float , float , 49 ], [ semi, ;, 49 ], 
[ id , result , 50 ], [ assign , = , 50 ], [ floatnum , 0.0 , 50 ], [ semi, ;, 50 ], 
[ id , result , 51 ], [ assign , = , 51 ], [ id , a , 51 ], [ mult , * , 51 ], [ id , x , 51 ], [ plus, +, 51 ], [ id , b , 51 ], [ semi, ;, 51 ], 
[ return , return , 52 ], [ openpar, (, 52 ], [ id , result , 52 ], [ closepar , ) , 52 ], [ semi, ;, 52 ], 
[ closecubr , } , 53 ], 
[ inlinecmt ,  ====== main ====== // , 54 ], 
[ function , function , 55 ], [ id , main , 55 ], [ openpar, (, 55 ], [ closepar , ) , 55 ], [ retruntype , => , 55 ], [ void , void , 55 ], 
[ opencubr , { , 56 ], 
[ localvar , localvar , 57 ], [ id , f1 , 57 ], [ colon , :, 57 ], [ id , LINEAR , 57 ], [ openpar, (, 57 ], [ intnum , 2 , 57 ], [ comma , , , 57 ], [ floatnum , 3.5 , 57 ], [ closepar , ) , 57 ], [ semi, ;, 57 ], 
[ localvar , localvar , 58 ], [ id , f2 , 58 ], [ colon , :, 58 ], [ id , QUADRATIC , 58 ], [ openpar, (, 58 ], [ minus, -, 58 ], [ floatnum , 2.0 , 58 ], [ comma , , , 58 ], [ floatnum , 1.0 , 58 ], [ comma , , , 58 ], [ floatnum , 0.0 , 58 ], [ closepar , ) , 58 ], [ semi, ;, 58 ], 
[ localvar , localvar , 59 ], [ id , counter , 59 ], [ colon , :, 59 ], [ integer , integer , 59 ], [ assign , = , 59 ], [ intnum , 1 , 59 ], [ semi, ;, 59 ], 
[ while , while , 61 ], [ openpar, (, 61 ], [ id , counter , 61 ], [ leq , <= , 61 ], [ intnum , 10 , 61 ], [ closepar , ) , 61 ], 
[ opencubr , { , 62 ], 
[ write , write , 63 ], [ openpar, (, 63 ], [ id , counter , 63 ], [ closepar , ) , 63 ], [ semi, ;, 63 ], 
[ write , write , 64 ], [ openpar, (, 64 ], [ id , f1 , 64 ], [ dot , . , 64 ], [ id , evaluate , 64 ], [ openpar, (, 64 ], [ id , counter , 64 ], [ closepar , ) , 64 ], [ closepar , ) , 64 ], [ semi, ;, 64 ], 
[ write , write , 65 ], [ openpar, (, 65 ], [ id , f2 , 65 ], [ dot , . , 65 ], [ id , evaluate , 65 ], [ openpar, (, 65 ], [ id , counter , 65 ], [ closepar , ) , 65 ], [ closepar , ) , 65 ], [ semi, ;, 65 ], 
[ closecubr , } , 66 ], [ semi, ;, 66 ], 
[ closecubr , } , 67 ], 
[ BlockCmt ,     classes    --------------------------------------| | no class declaration| | class declaration|X| multiple class declarations|X| no data member declaration|X| data member declaration|X| multiple data member declaration| | no member function declaration|X| member function declaration|X| multiple member function declaration| | no member|X| no inherited class|X| one inherited class| | multiple inherited classes|X| private member specifier|X| public member specifier    functions: definitions    --------------------------------------| | no main function definition|X| main function definition|X| no free function definition| | free function definition| | multiple free function definitions| | no member function definition|X| member function definition|X| multiple member function definitions| | return type: void| | return type: integer|X| return type: float|X| return type: id| | return type: array (not allowed)    functions: formal parameters    --------------------------------------| | type: integer|X| type: float| | type: id| | type: 1-dim array | | type: n-dim array| | type: array (with size)| | type: array (without size)    functions: calls    --------------------------------------| | free function call|X| member function call| | parameters:0|X| parameters:1|X| parameters:n| | array parameter - 1-dim| | array parameter - n-dim| | array parameter - with size| | array parameter - without size| | function call as statement|X| function call as expression factor| | expression as parameter    variable declaration    --------------------------------------| | type: integer| | type: float| | type: string|X| type: id| | type: 1-dim array | | type: n-dim array| | type: array (with size)| | type: array (without size)    function body: local variable declarations    --------------------------------------| | no local variable declarations|X| local variable declarations| | intertwined statements and variable declarations    function body: statements    --------------------------------------| | no statement| | 1 statement|X| n statements| | if statement| | if: empty then or else blocks| | if: 1-statement then or else blocks| | if: n-statements then or else blocks|X| while statement| | while: empty block| | while: 1-statement block|X| while: n-statement block| | read(<variable>) statement|X| write(<expr>) statement|X| return(<expr>) statement|X| assignment statement    variable + idnest    --------------------------------------|X| id|X| id.id|X| id.id(id)| | id(id).id| | id(id).id()| | id.id[id]| | id[id].id| | id[id].id[id]| | id.id[id][id]| | id[id][id].id| | id[id][id].id[id][id]| | id(id).id[id]| | id(id).id[id][id]| | expression as array index    expressions    --------------------------------------| | single variable| | involving addop| | involving multop| | involving relop|X| involving addop + multop| | involving multop + relop| | involving addop + multop + relop| | involving parentheses| | involving nested parenhteses| | involving not| | involving sign| | involving literals|X| involving variable + idnest|X| involving function calls| | involving all the above in one expression , 68 ], 