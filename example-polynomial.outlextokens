
[inlinecmt,  ====== struct declarations ====== //, 2], 
[class, class, 3], [id, POLYNOMIAL, 3], [Opencubr, {, 3], 
[public, public, 4], [function, function, 4], [id, evaluate, 4], [Colon, :, 4], [Openpar, (, 4], [id, x, 4], [Colon, :, 4], [integer, integer, 4], [Closepar, ), 4], [arrow, =>, 4], [integer, integer, 4], [Semi, ;, 4], 
[Closecubr, }, 5], [Semi, ;, 5], 
[class, class, 7], [id, LINEAR, 7], [isa, isa, 7], [id, POLYNOMIAL, 7], [Opencubr, {, 7], 
[private, private, 8], [attribute, attribute, 8], [id, a, 8], [Colon, :, 8], [integer, integer, 8], [Semi, ;, 8], 
[private, private, 9], [attribute, attribute, 9], [id, b, 9], [Colon, :, 9], [integer, integer, 9], [Semi, ;, 9], 
[public, public, 10], [constructor, constructor, 10], [Colon, :, 10], [Openpar, (, 10], [id, A, 10], [Colon, :, 10], [integer, integer, 10], [Comma, ,, 10], [id, B, 10], [Colon, :, 10], [integer, integer, 10], [Closepar, ), 10], [Semi, ;, 10], 
[public, public, 11], [function, function, 11], [id, evaluate, 11], [Colon, :, 11], [Openpar, (, 11], [id, x, 11], [Colon, :, 11], [integer, integer, 11], [Closepar, ), 11], [arrow, =>, 11], [integer, integer, 11], [Semi, ;, 11], 
[Closecubr, }, 12], [Semi, ;, 12], 
[inlinecmt,  ====== member function implementations ====== //  , 16], 
[function, function, 17], [id, POLYNOMIAL, 17], [sr, ::, 17], [id, evaluate, 17], [Openpar, (, 17], [id, x, 17], [Colon, :, 17], [integer, integer, 17], [Closepar, ), 17], [arrow, =>, 17], [integer, integer, 17], [inlinecmt,  2.1, 2.2, 17], 
[Opencubr, {, 18], 
[return, return, 19], [Openpar, (, 19], [intLit, 0, 19], [Closepar, ), 19], [Semi, ;, 19], [inlinecmt,  2.3, 19], 
[Closecubr, }, 20], 
[function, function, 23], [id, LINEAR, 23], [sr, ::, 23], [constructor, constructor, 23], [Openpar, (, 23], [id, A, 23], [Colon, :, 23], [integer, integer, 23], [Comma, ,, 23], [id, B, 23], [Colon, :, 23], [integer, integer, 23], [Closepar, ), 23], [inlinecmt,  2.1, 2.2, 23], 
[Opencubr, {, 24], 
[id, self, 25], [dot, ., 25], [id, a, 25], [assign, =, 25], [id, A, 25], [Semi, ;, 25], [inlinecmt,  3.1, 5.3, 25], 
[id, self, 26], [dot, ., 26], [id, b, 26], [assign, =, 26], [id, B, 26], [Semi, ;, 26], [inlinecmt,  3.1, 5.3, 26], 
[Closecubr, }, 27], 
[function, function, 29], [id, LINEAR, 29], [sr, ::, 29], [id, evaluate, 29], [Openpar, (, 29], [id, x, 29], [Colon, :, 29], [integer, integer, 29], [Closepar, ), 29], [arrow, =>, 29], [integer, integer, 29], [inlinecmt,  2.1, 2.2, 29], 
[Opencubr, {, 30], 
[localvar, localvar, 31], [id, result, 31], [Colon, :, 31], [integer, integer, 31], [Semi, ;, 31], [inlinecmt,  1.1, 31], 
[id, result, 32], [assign, =, 32], [intLit, 0, 32], [Semi, ;, 32], [inlinecmt,  3.1, 32], 
[id, result, 33], [assign, =, 33], [id, a, 33], [Mult, *, 33], [id, x, 33], [Plus, +, 33], [id, b, 33], [Semi, ;, 33], [inlinecmt,  3.1, 5.1, 33], 
[return, return, 34], [Openpar, (, 34], [id, result, 34], [Closepar, ), 34], [Semi, ;, 34], [inlinecmt,  2.3, 34], 
[Closecubr, }, 35], 
[inlinecmt,  ====== main ====== //, 37], 
[function, function, 38], [id, main, 38], [Openpar, (, 38], [Closepar, ), 38], [arrow, =>, 38], [void, void, 38], [inlinecmt,  2.1, 2.2, 38], 
[Opencubr, {, 39], 
[localvar, localvar, 40], [id, f1, 40], [Colon, :, 40], [id, LINEAR, 40], [Opensqbr, [, 40], [intLit, 5, 40], [Closesqbr, ], 40], [Semi, ;, 40], [inlinecmt,  1.3, 2.1, 2.2, 2.4, 40], 
[localvar, localvar, 41], [id, f3, 41], [Colon, :, 41], [id, LINEAR, 41], [Semi, ;, 41], 
[localvar, localvar, 42], [id, f2, 42], [Colon, :, 42], [id, LINEAR, 42], [Openpar, (, 42], [intLit, 14, 42], [Comma, ,, 42], [intLit, 10, 42], [Closepar, ), 42], [Semi, ;, 42], 
[inlinecmt,   localvar f2: QUADRATIC(-2, 1, 0);                         // 1.3, 2.1, 2.2, 2.4, 43], 
[localvar, localvar, 44], [id, counter, 44], [Colon, :, 44], [integer, integer, 44], [Semi, ;, 44], [inlinecmt,  1.1, 44], 
[id, counter, 45], [assign, =, 45], [intLit, 1, 45], [Semi, ;, 45], [inlinecmt,  3.1, 45], 
[id, f1, 46], [Opensqbr, [, 46], [intLit, 1, 46], [Closesqbr, ], 46], [assign, =, 46], [id, build, 46], [Openpar, (, 46], [intLit, 2, 46], [Comma, ,, 46], [intLit, 2, 46], [Closepar, ), 46], [Semi, ;, 46], 
[id, f1, 47], [Opensqbr, [, 47], [intLit, 2, 47], [Closesqbr, ], 47], [assign, =, 47], [id, build, 47], [Openpar, (, 47], [intLit, 4, 47], [Comma, ,, 47], [intLit, 4, 47], [Closepar, ), 47], [Semi, ;, 47], 
[id, f3, 48], [assign, =, 48], [id, build, 48], [Openpar, (, 48], [intLit, 3, 48], [Comma, ,, 48], [intLit, 3, 48], [Closepar, ), 48], [Semi, ;, 48], 
[inlinecmt,   f2 = build(3,4);, 49], 
[inlinecmt,  write(f2.b);, 50], 
[while, while, 51], [Openpar, (, 51], [id, counter, 51], [leq, <=, 51], [intLit, 10, 51], [Closepar, ), 51], [inlinecmt,  3.3, 5.1 , 51], 
[Opencubr, {, 52], 
[write, write, 53], [Openpar, (, 53], [id, counter, 53], [Closepar, ), 53], [Semi, ;, 53], [inlinecmt,  3.4, 53], 
[inlinecmt,    write(f1.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4, 54], 
[inlinecmt,    write(f2.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4, 55], 
[id, counter, 56], [assign, =, 56], [id, counter, 56], [Plus, +, 56], [intLit, 1, 56], [Semi, ;, 56], [inlinecmt,  3.1, 56], 
[Closecubr, }, 57], [Semi, ;, 57], 
[write, write, 58], [Openpar, (, 58], [id, f1, 58], [Opensqbr, [, 58], [intLit, 2, 58], [Closesqbr, ], 58], [dot, ., 58], [id, evaluate, 58], [Openpar, (, 58], [id, counter, 58], [Closepar, ), 58], [Closepar, ), 58], [Semi, ;, 58], 
[write, write, 59], [Openpar, (, 59], [id, f3, 59], [dot, ., 59], [id, a, 59], [Closepar, ), 59], [Semi, ;, 59], 
[write, write, 60], [Openpar, (, 60], [id, f3, 60], [dot, ., 60], [id, b, 60], [Closepar, ), 60], [Semi, ;, 60], 
[write, write, 61], [Openpar, (, 61], [id, f3, 61], [dot, ., 61], [id, evaluate, 61], [Openpar, (, 61], [intLit, 5, 61], [Closepar, ), 61], [Closepar, ), 61], [Semi, ;, 61], 
[write, write, 62], [Openpar, (, 62], [id, f2, 62], [dot, ., 62], [id, a, 62], [Plus, +, 62], [id, counter, 62], [Mult, *, 62], [intLit, 3, 62], [Plus, +, 62], [id, counter, 62], [Mult, *, 62], [Openpar, (, 62], [intLit, 3, 62], [Plus, +, 62], [intLit, 4, 62], [Closepar, ), 62], [Closepar, ), 62], [Semi, ;, 62], 
[Closecubr, }, 63], 