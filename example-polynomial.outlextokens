
[inlinecmt,  ====== struct declarations ====== //, 2], 
[class, class, 3], [id, POLYNOMIAL, 3], [Opencubr, {, 3], 
[public, public, 4], [function, function, 4], [id, evaluate, 4], [Colon, :, 4], [Openpar, (, 4], [id, x, 4], [Colon, :, 4], [integer, integer, 4], [Closepar, ), 4], [arrow, =>, 4], [integer, integer, 4], [Semi, ;, 4], 
[Closecubr, }, 5], [Semi, ;, 5], 
[class, class, 7], [id, LINEAR, 7], [isa, isa, 7], [id, POLYNOMIAL, 7], [Opencubr, {, 7], 
[private, private, 8], [attribute, attribute, 8], [id, a, 8], [Colon, :, 8], [integer, integer, 8], [Semi, ;, 8], 
[private, private, 9], [attribute, attribute, 9], [id, b, 9], [Colon, :, 9], [integer, integer, 9], [Semi, ;, 9], 
[public, public, 10], [constructor, constructor, 10], [Colon, :, 10], [Openpar, (, 10], [id, A, 10], [Colon, :, 10], [integer, integer, 10], [Comma, ,, 10], [id, B, 10], [Colon, :, 10], [integer, integer, 10], [Closepar, ), 10], [Semi, ;, 10], 
[inlinecmt,   public  function evaluate: (x: integer) => integer;, 11], 
[public, public, 12], [function, function, 12], [id, overload, 12], [Colon, :, 12], [Openpar, (, 12], [id, x, 12], [Colon, :, 12], [integer, integer, 12], [Closepar, ), 12], [arrow, =>, 12], [integer, integer, 12], [Semi, ;, 12], 
[public, public, 13], [function, function, 13], [id, overload, 13], [Colon, :, 13], [Openpar, (, 13], [id, x, 13], [Colon, :, 13], [integer, integer, 13], [Comma, ,, 13], [id, y, 13], [Colon, :, 13], [integer, integer, 13], [Closepar, ), 13], [arrow, =>, 13], [integer, integer, 13], [Semi, ;, 13], 
[Closecubr, }, 14], [Semi, ;, 14], 
[inlinecmt,  ====== member function implementations ====== //  , 18], 
[function, function, 19], [id, POLYNOMIAL, 19], [sr, ::, 19], [id, evaluate, 19], [Openpar, (, 19], [id, x, 19], [Colon, :, 19], [integer, integer, 19], [Closepar, ), 19], [arrow, =>, 19], [integer, integer, 19], [inlinecmt,  2.1, 2.2, 19], 
[Opencubr, {, 20], 
[return, return, 21], [Openpar, (, 21], [intLit, 0, 21], [Closepar, ), 21], [Semi, ;, 21], [inlinecmt,  2.3, 21], 
[Closecubr, }, 22], 
[function, function, 25], [id, LINEAR, 25], [sr, ::, 25], [constructor, constructor, 25], [Openpar, (, 25], [id, A, 25], [Colon, :, 25], [integer, integer, 25], [Comma, ,, 25], [id, B, 25], [Colon, :, 25], [integer, integer, 25], [Closepar, ), 25], [inlinecmt,  2.1, 2.2, 25], 
[Opencubr, {, 26], 
[id, self, 27], [dot, ., 27], [id, a, 27], [assign, =, 27], [id, A, 27], [Semi, ;, 27], [inlinecmt,  3.1, 5.3, 27], 
[id, self, 28], [dot, ., 28], [id, b, 28], [assign, =, 28], [id, B, 28], [Semi, ;, 28], [inlinecmt,  3.1, 5.3, 28], 
[Closecubr, }, 29], 
[function, function, 31], [id, LINEAR, 31], [sr, ::, 31], [id, evaluate, 31], [Openpar, (, 31], [id, x, 31], [Colon, :, 31], [integer, integer, 31], [Closepar, ), 31], [arrow, =>, 31], [integer, integer, 31], [inlinecmt,  2.1, 2.2, 31], 
[Opencubr, {, 32], 
[localvar, localvar, 33], [id, result, 33], [Colon, :, 33], [integer, integer, 33], [Semi, ;, 33], [inlinecmt,  1.1, 33], 
[id, result, 34], [assign, =, 34], [intLit, 0, 34], [Semi, ;, 34], [inlinecmt,  3.1, 34], 
[id, result, 35], [assign, =, 35], [id, a, 35], [Mult, *, 35], [id, x, 35], [Plus, +, 35], [id, b, 35], [Semi, ;, 35], [inlinecmt,  3.1, 5.1, 35], 
[return, return, 36], [Openpar, (, 36], [id, result, 36], [Closepar, ), 36], [Semi, ;, 36], [inlinecmt,  2.3, 36], 
[Closecubr, }, 37], 
[function, function, 38], [id, LINEAR, 38], [sr, ::, 38], [id, notImplemented, 38], [Openpar, (, 38], [id, x, 38], [Colon, :, 38], [integer, integer, 38], [Closepar, ), 38], [arrow, =>, 38], [integer, integer, 38], [inlinecmt,  2.1, 2.2, 38], 
[Opencubr, {, 39], 
[localvar, localvar, 40], [id, result, 40], [Colon, :, 40], [integer, integer, 40], [Semi, ;, 40], [inlinecmt,  1.1, 40], 
[id, result, 41], [assign, =, 41], [intLit, 0, 41], [Semi, ;, 41], [inlinecmt,  3.1, 41], 
[id, result, 42], [assign, =, 42], [id, a, 42], [Mult, *, 42], [id, x, 42], [Plus, +, 42], [id, b, 42], [Semi, ;, 42], [inlinecmt,  3.1, 5.1, 42], 
[return, return, 43], [Openpar, (, 43], [id, result, 43], [Closepar, ), 43], [Semi, ;, 43], [inlinecmt,  2.3, 43], 
[Closecubr, }, 44], 
[function, function, 46], [id, LINEAR, 46], [sr, ::, 46], [id, overload, 46], [Openpar, (, 46], [id, x, 46], [Colon, :, 46], [integer, integer, 46], [Comma, ,, 46], [id, y, 46], [Colon, :, 46], [integer, integer, 46], [Closepar, ), 46], [arrow, =>, 46], [integer, integer, 46], [inlinecmt,  2.1, 2.2, 46], 
[Opencubr, {, 47], 
[localvar, localvar, 48], [id, result, 48], [Colon, :, 48], [integer, integer, 48], [Semi, ;, 48], [inlinecmt,  1.1, 48], 
[id, result, 49], [assign, =, 49], [intLit, 0, 49], [Semi, ;, 49], [inlinecmt,  3.1, 49], 
[id, result, 50], [assign, =, 50], [id, a, 50], [Mult, *, 50], [id, x, 50], [Plus, +, 50], [id, b, 50], [Semi, ;, 50], [inlinecmt,  3.1, 5.1, 50], 
[return, return, 51], [Openpar, (, 51], [id, result, 51], [Closepar, ), 51], [Semi, ;, 51], [inlinecmt,  2.3, 51], 
[Closecubr, }, 52], 
[function, function, 53], [id, LINEAR, 53], [sr, ::, 53], [id, overload, 53], [Openpar, (, 53], [id, x, 53], [Colon, :, 53], [integer, integer, 53], [Closepar, ), 53], [arrow, =>, 53], [integer, integer, 53], [inlinecmt,  2.1, 2.2, 53], 
[Opencubr, {, 54], 
[localvar, localvar, 55], [id, result, 55], [Colon, :, 55], [integer, integer, 55], [Semi, ;, 55], [inlinecmt,  1.1, 55], 
[id, result, 56], [assign, =, 56], [intLit, 0, 56], [Semi, ;, 56], [inlinecmt,  3.1, 56], 
[id, result, 57], [assign, =, 57], [id, a, 57], [Mult, *, 57], [id, x, 57], [Plus, +, 57], [id, b, 57], [Semi, ;, 57], [inlinecmt,  3.1, 5.1, 57], 
[return, return, 58], [Openpar, (, 58], [id, result, 58], [Closepar, ), 58], [Semi, ;, 58], [inlinecmt,  2.3, 58], 
[Closecubr, }, 59], 
[inlinecmt,  cycle in class, 61], 
[class, class, 62], [id, A, 62], [isa, isa, 62], [id, C, 62], [Opencubr, {, 62], [Closecubr, }, 62], [Semi, ;, 62], 
[class, class, 63], [id, B, 63], [isa, isa, 63], [id, A, 63], [Opencubr, {, 63], [Closecubr, }, 63], [Semi, ;, 63], 
[class, class, 64], [id, C, 64], [isa, isa, 64], [id, B, 64], [Opencubr, {, 64], [Closecubr, }, 64], [Semi, ;, 64], 
[inlinecmt,  ====== main ====== //, 66], 
[function, function, 67], [id, main, 67], [Openpar, (, 67], [Closepar, ), 67], [arrow, =>, 67], [void, void, 67], [inlinecmt,  2.1, 2.2, 67], 
[Opencubr, {, 68], 
[localvar, localvar, 69], [id, f1, 69], [Colon, :, 69], [id, LINEAR, 69], [Opensqbr, [, 69], [intLit, 5, 69], [Closesqbr, ], 69], [Semi, ;, 69], [inlinecmt,  1.3, 2.1, 2.2, 2.4, 69], 
[localvar, localvar, 70], [id, f3, 70], [Colon, :, 70], [id, LINEAR, 70], [Semi, ;, 70], 
[localvar, localvar, 71], [id, f2, 71], [Colon, :, 71], [id, LINEAR, 71], [Openpar, (, 71], [intLit, 14, 71], [Comma, ,, 71], [intLit, 10, 71], [Comma, ,, 71], [intLit, 4, 71], [Closepar, ), 71], [Semi, ;, 71], 
[localvar, localvar, 72], [id, counter, 72], [Colon, :, 72], [integer, integer, 72], [Semi, ;, 72], [inlinecmt,  1.1, 72], 
[inlinecmt,  Duplicate declarations, 73], 
[localvar, localvar, 74], [id, counter, 74], [Colon, :, 74], [integer, integer, 74], [Semi, ;, 74], 
[id, counter, 75], [assign, =, 75], [Semi, ;, 75], [inlinecmt,  3.1, 75], 
[inlinecmt,  Type matching, 76], 
[id, counter, 77], [assign, =, 77], [intLit, 1, 77], [Plus, +, 77], [floatLit, 1.1, 77], [Semi, ;, 77], 
[id, f1, 78], [Opensqbr, [, 78], [intLit, 1, 78], [Closesqbr, ], 78], [assign, =, 78], [id, build, 78], [Openpar, (, 78], [intLit, 2, 78], [Comma, ,, 78], [intLit, 2, 78], [Closepar, ), 78], [Semi, ;, 78], 
[id, f1, 79], [Opensqbr, [, 79], [intLit, 2, 79], [Closesqbr, ], 79], [assign, =, 79], [id, build, 79], [Openpar, (, 79], [intLit, 4, 79], [Comma, ,, 79], [intLit, 4, 79], [Closepar, ), 79], [Semi, ;, 79], 
[id, f3, 80], [assign, =, 80], [id, build, 80], [Openpar, (, 80], [intLit, 3, 80], [Comma, ,, 80], [intLit, 3, 80], [Closepar, ), 80], [Semi, ;, 80], 
[inlinecmt,   f2 = build(3,4);, 81], 
[write, write, 82], [Openpar, (, 82], [id, f2, 82], [dot, ., 82], [id, b, 82], [Closepar, ), 82], [Semi, ;, 82], 
[while, while, 83], [Openpar, (, 83], [id, counter, 83], [leq, <=, 83], [intLit, 10, 83], [Closepar, ), 83], [inlinecmt,  3.3, 5.1 , 83], 
[Opencubr, {, 84], 
[write, write, 85], [Openpar, (, 85], [id, counter, 85], [Closepar, ), 85], [Semi, ;, 85], [inlinecmt,  3.4, 85], 
[inlinecmt,    write(f1.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4, 86], 
[inlinecmt,    write(f2.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4, 87], 
[id, counter, 88], [assign, =, 88], [id, counter, 88], [Plus, +, 88], [intLit, 1, 88], [Semi, ;, 88], [inlinecmt,  3.1, 88], 
[Closecubr, }, 89], [Semi, ;, 89], 
[write, write, 90], [Openpar, (, 90], [id, f1, 90], [Opensqbr, [, 90], [intLit, 2, 90], [Closesqbr, ], 90], [dot, ., 90], [id, evaluate, 90], [Openpar, (, 90], [id, counter, 90], [Comma, ,, 90], [intLit, 100, 90], [Closepar, ), 90], [Closepar, ), 90], [Semi, ;, 90], 
[write, write, 91], [Openpar, (, 91], [id, f3, 91], [dot, ., 91], [id, a, 91], [Closepar, ), 91], [Semi, ;, 91], 
[write, write, 92], [Openpar, (, 92], [id, f3, 92], [dot, ., 92], [id, b, 92], [Closepar, ), 92], [Semi, ;, 92], 
[write, write, 93], [Openpar, (, 93], [id, f3, 93], [dot, ., 93], [id, evaluate, 93], [Openpar, (, 93], [intLit, 5, 93], [Closepar, ), 93], [Closepar, ), 93], [Semi, ;, 93], 
[write, write, 94], [Openpar, (, 94], [id, f2, 94], [dot, ., 94], [id, a, 94], [Plus, +, 94], [id, counter, 94], [Mult, *, 94], [intLit, 3, 94], [Plus, +, 94], [id, counter, 94], [Mult, *, 94], [Openpar, (, 94], [intLit, 3, 94], [Plus, +, 94], [intLit, 4, 94], [Closepar, ), 94], [Closepar, ), 94], [Semi, ;, 94], 
[Closecubr, }, 95], 