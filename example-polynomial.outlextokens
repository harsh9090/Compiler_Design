
[inlinecmt,  ====== struct declarations ====== //, 2], 
[class, class, 3], [id, POLYNOMIAL, 3], [Opencubr, {, 3], 
[public, public, 4], [function, function, 4], [id, evaluate, 4], [Colon, :, 4], [Openpar, (, 4], [id, x, 4], [Colon, :, 4], [integer, integer, 4], [Closepar, ), 4], [arrow, =>, 4], [integer, integer, 4], [Semi, ;, 4], 
[Closecubr, }, 5], [Semi, ;, 5], 
[class, class, 7], [id, LINEAR, 7], [isa, isa, 7], [id, POLYNOMIAL, 7], [Opencubr, {, 7], 
[private, private, 8], [attribute, attribute, 8], [id, a, 8], [Colon, :, 8], [integer, integer, 8], [Semi, ;, 8], 
[private, private, 9], [attribute, attribute, 9], [id, b, 9], [Colon, :, 9], [integer, integer, 9], [Semi, ;, 9], 
[public, public, 10], [constructor, constructor, 10], [Colon, :, 10], [Openpar, (, 10], [id, A, 10], [Colon, :, 10], [integer, integer, 10], [Comma, ,, 10], [id, B, 10], [Colon, :, 10], [integer, integer, 10], [Closepar, ), 10], [Semi, ;, 10], 
[public, public, 11], [function, function, 11], [id, evaluate, 11], [Colon, :, 11], [Openpar, (, 11], [id, x, 11], [Colon, :, 11], [integer, integer, 11], [Closepar, ), 11], [arrow, =>, 11], [integer, integer, 11], [Semi, ;, 11], 
[Closecubr, }, 12], [Semi, ;, 12], 
[class, class, 14], [id, QUADRATIC, 14], [isa, isa, 14], [id, POLYNOMIAL, 14], [Opencubr, {, 14], 
[private, private, 15], [attribute, attribute, 15], [id, a, 15], [Colon, :, 15], [integer, integer, 15], [Semi, ;, 15], 
[private, private, 16], [attribute, attribute, 16], [id, b, 16], [Colon, :, 16], [integer, integer, 16], [Semi, ;, 16], 
[private, private, 17], [attribute, attribute, 17], [id, c, 17], [Colon, :, 17], [integer, integer, 17], [Semi, ;, 17], 
[public, public, 18], [constructor, constructor, 18], [Colon, :, 18], [Openpar, (, 18], [id, A, 18], [Colon, :, 18], [integer, integer, 18], [Comma, ,, 18], [id, B, 18], [Colon, :, 18], [integer, integer, 18], [Comma, ,, 18], [id, C, 18], [Colon, :, 18], [integer, integer, 18], [Closepar, ), 18], [Semi, ;, 18], 
[public, public, 19], [function, function, 19], [id, evaluate, 19], [Colon, :, 19], [Openpar, (, 19], [id, x, 19], [Colon, :, 19], [integer, integer, 19], [Closepar, ), 19], [arrow, =>, 19], [integer, integer, 19], [Semi, ;, 19], 
[Closecubr, }, 20], [Semi, ;, 20], 
[inlinecmt,  ====== member function implementations ====== //  , 22], 
[function, function, 23], [id, POLYNOMIAL, 23], [sr, ::, 23], [id, evaluate, 23], [Openpar, (, 23], [id, x, 23], [Colon, :, 23], [integer, integer, 23], [Closepar, ), 23], [arrow, =>, 23], [integer, integer, 23], [inlinecmt,  2.1, 2.2, 23], 
[Opencubr, {, 24], 
[return, return, 25], [Openpar, (, 25], [intLit, 0, 25], [Closepar, ), 25], [Semi, ;, 25], [inlinecmt,  2.3, 25], 
[Closecubr, }, 26], 
[function, function, 28], [id, QUADRATIC, 28], [sr, ::, 28], [id, evaluate, 28], [Openpar, (, 28], [id, x, 28], [Colon, :, 28], [integer, integer, 28], [Closepar, ), 28], [arrow, =>, 28], [integer, integer, 28], 
[Opencubr, {, 29], 
[localvar, localvar, 30], [id, result, 30], [Colon, :, 30], [integer, integer, 30], [Semi, ;, 30], [inlinecmt,  1.1, 30], 
[inlinecmt, Using Horner's method, 31], 
[id, result, 32], [assign, =, 32], [id, a, 32], [Semi, ;, 32], [inlinecmt,  3.1       , 32], 
[id, result, 33], [assign, =, 33], [id, result, 33], [Mult, *, 33], [id, x, 33], [Plus, +, 33], [id, b, 33], [Semi, ;, 33], [inlinecmt,  3.1, 5.1, 33], 
[id, result, 34], [assign, =, 34], [id, result, 34], [Mult, *, 34], [id, x, 34], [Plus, +, 34], [id, c, 34], [Semi, ;, 34], [inlinecmt,  3.1, 5.1, 34], 
[return, return, 35], [Openpar, (, 35], [id, result, 35], [Closepar, ), 35], [Semi, ;, 35], [inlinecmt,  2.3, 35], 
[Closecubr, }, 36], 
[function, function, 38], [id, QUADRATIC, 38], [sr, ::, 38], [constructor, constructor, 38], [Openpar, (, 38], [id, A, 38], [Colon, :, 38], [integer, integer, 38], [Comma, ,, 38], [id, B, 38], [Colon, :, 38], [integer, integer, 38], [Comma, ,, 38], [id, C, 38], [Colon, :, 38], [integer, integer, 38], [Closepar, ), 38], [inlinecmt,  2.1, 2.2, 38], 
[Opencubr, {, 39], 
[id, self, 40], [dot, ., 40], [id, a, 40], [assign, =, 40], [id, A, 40], [Semi, ;, 40], [inlinecmt,  3.1, 5.3, 40], 
[id, self, 41], [dot, ., 41], [id, b, 41], [assign, =, 41], [id, B, 41], [Semi, ;, 41], [inlinecmt,  3.1, 5.3, 41], 
[id, self, 42], [dot, ., 42], [id, c, 42], [assign, =, 42], [id, C, 42], [Semi, ;, 42], [inlinecmt,  3.1, 5.3, 42], 
[Closecubr, }, 43], 
[function, function, 45], [id, LINEAR, 45], [sr, ::, 45], [constructor, constructor, 45], [Openpar, (, 45], [id, A, 45], [Colon, :, 45], [integer, integer, 45], [Comma, ,, 45], [id, B, 45], [Colon, :, 45], [integer, integer, 45], [Closepar, ), 45], [inlinecmt,  2.1, 2.2, 45], 
[Opencubr, {, 46], 
[id, self, 47], [dot, ., 47], [id, a, 47], [assign, =, 47], [id, A, 47], [Semi, ;, 47], [inlinecmt,  3.1, 5.3, 47], 
[id, self, 48], [dot, ., 48], [id, b, 48], [assign, =, 48], [id, B, 48], [Semi, ;, 48], [inlinecmt,  3.1, 5.3, 48], 
[Closecubr, }, 49], 
[function, function, 51], [id, LINEAR, 51], [sr, ::, 51], [id, evaluate, 51], [Openpar, (, 51], [id, x, 51], [Colon, :, 51], [integer, integer, 51], [Closepar, ), 51], [arrow, =>, 51], [integer, integer, 51], [inlinecmt,  2.1, 2.2, 51], 
[Opencubr, {, 52], 
[localvar, localvar, 53], [id, result, 53], [Colon, :, 53], [integer, integer, 53], [Semi, ;, 53], [inlinecmt,  1.1, 53], 
[id, result, 54], [assign, =, 54], [intLit, 0, 54], [Semi, ;, 54], [inlinecmt,  3.1, 54], 
[id, result, 55], [assign, =, 55], [id, a, 55], [Mult, *, 55], [id, x, 55], [Plus, +, 55], [id, b, 55], [Semi, ;, 55], [inlinecmt,  3.1, 5.1, 55], 
[return, return, 56], [Openpar, (, 56], [id, result, 56], [Closepar, ), 56], [Semi, ;, 56], [inlinecmt,  2.3, 56], 
[Closecubr, }, 57], 
[inlinecmt,  ====== main ====== //, 59], 
[function, function, 60], [id, main, 60], [Openpar, (, 60], [Closepar, ), 60], [arrow, =>, 60], [void, void, 60], [inlinecmt,  2.1, 2.2, 60], 
[Opencubr, {, 61], 
[localvar, localvar, 62], [id, f1, 62], [Colon, :, 62], [id, LINEAR, 62], [Openpar, (, 62], [intLit, 2, 62], [Comma, ,, 62], [intLit, 3, 62], [Closepar, ), 62], [Semi, ;, 62], [inlinecmt,  1.3, 2.1, 2.2, 2.4, 62], 
[localvar, localvar, 63], [id, f2, 63], [Colon, :, 63], [id, QUADRATIC, 63], [Openpar, (, 63], [Minus, -, 63], [intLit, 2, 63], [Comma, ,, 63], [intLit, 1, 63], [Comma, ,, 63], [intLit, 0, 63], [Closepar, ), 63], [Semi, ;, 63], [inlinecmt,  1.3, 2.1, 2.2, 2.4, 63], 
[localvar, localvar, 64], [id, counter, 64], [Colon, :, 64], [integer, integer, 64], [Semi, ;, 64], [inlinecmt,  1.1, 64], 
[id, counter, 66], [assign, =, 66], [intLit, 1, 66], [Semi, ;, 66], [inlinecmt,  3.1, 66], 
[while, while, 68], [Openpar, (, 68], [id, counter, 68], [leq, <=, 68], [intLit, 10, 68], [Closepar, ), 68], [inlinecmt,  3.3, 5.1 , 68], 
[Opencubr, {, 69], 
[write, write, 70], [Openpar, (, 70], [id, counter, 70], [Closepar, ), 70], [Semi, ;, 70], [inlinecmt,  3.4, 70], 
[inlinecmt,    write(f1.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4, 71], 
[inlinecmt,    write(f2.evaluate(counter));                                  // 3.4, 2.1, 2.2, 2.4, 72], 
[id, counter, 73], [assign, =, 73], [id, counter, 73], [Plus, +, 73], [intLit, 1, 73], [Semi, ;, 73], [inlinecmt,  3.1, 73], 
[Closecubr, }, 74], [Semi, ;, 74], 
[write, write, 75], [Openpar, (, 75], [id, f1, 75], [dot, ., 75], [id, evaluate, 75], [Openpar, (, 75], [id, counter, 75], [Closepar, ), 75], [Closepar, ), 75], [Semi, ;, 75], 
[Closecubr, }, 76], 