ST ::= A5 REPTPROG C10
STATMT ::= id A4 STATMTIDNEST ; B2
STATMT ::= while ( RELEXPR ) STATBLK ; D9
STATMT ::= read ( VAR ) ; 
STATMT ::= write ( EXPR ) F1 ;  
STATMT ::= return ( EXPR ) F3 ;
STATMT ::= if ( RELEXPR ) then STATBLK E3 else STATBLK E4 ; B4
STATMTIDNEST ::= . id A4 STATMTIDNEST D8
STATMTIDNEST ::= ( APRMS ) A5 STATID2 B9 B3
STATMTIDNEST ::= A5 INDICE REPTIDNEST V3 STATID3 B5
STATMTIDNEST ::= ASSOP EXPR E6
STATID2 ::= ''
STATID2 ::= . id A4 STATMTIDNEST D8
STATID3 ::= ASSOP EXPR V19
STATID3 ::= . id A4 STATMTIDNEST D8
ASSOP ::= =
RELEXPR ::= ARIEXPR RELOP ARIEXPR V5
RELOP ::= eq  
RELOP ::= neq  
RELOP ::= lt  
RELOP ::= gt 
RELOP ::= leq  
RELOP ::= geq
STATBLK ::= A5 { REPTBLK1 } V6 
REPTBLK1 ::= STATMT REPTBLK1 
REPTBLK1 ::= '' 
STATBLK ::= STATMT   
STATBLK ::=  ''
VAR ::=  id A4 VAR2 V18
VAR2 ::=  A5 REPTIDNEST V3 A5 REPTVAR V1 V11
REPTVAR ::=  VARID REPTVAR
REPTVAR ::=  ''
VARID ::= . id A4 VARID2 V16
VARID2 ::= ( APRMS ) VARID V17
VARID2 ::= A5 REPTIDNEST V3 
VAR2 ::= ( APRMS ) VARID V11
APRMS ::= EXPR A5 REPTAPRM V8 V15
APRMS ::= ''
EXPR ::= A5 ARIEXPR EXPR2 V9
EXPR2 ::= RELOP A6 ARIEXPR
EXPR2 ::= ''
ARIEXPR ::= A5 TERM A5 RIGARIEXPR V2
TERM ::= A5 FACTOR RIGTEM V13
REPTIDNEST ::= INDICE REPTIDNEST
REPTIDNEST ::= ''
REPTVARORFUNCALL ::=  IDNEST REPTVARORFUNCALL  
REPTVARORFUNCALL ::=  ''
IDNEST ::= . id A4 IDNEST2 B6
IDNEST2 ::= ( APRMS )  
IDNEST2 ::= A5 REPTIDNEST V3
RIGTEM ::= MULOP FACTOR B7 RIGTEM 
RIGTEM ::= ''
MULOP ::= *
MULOP ::= /
MULOP ::= and
RIGARIEXPR ::= ADDOP TERM B8 RIGARIEXPR 
RIGARIEXPR ::= ''
ADDOP ::= +
ADDOP ::= -
ADDOP ::= or
REPTAPRM ::= APRMTAIL REPTAPRM 
REPTAPRM ::= ''
APRMTAIL ::= , EXPR
FACTOR ::= intLit A7
FACTOR ::= floatLit E2
FACTOR ::= ( ARIEXPR )
FACTOR ::= not FACTOR E5
FACTOR ::= SIGN A3 FACTOR V10
FACTOR ::= id A4 FACTOR2 A5 REPTVARORFUNCALL V7 V14
FACTOR2 ::= ( APRMS ) 
FACTOR2 ::= A5 REPTIDNEST V3
SIGN ::= +
SIGN ::= -
INDICE ::= [ ARIEXPR ] 
LOCVARSTAT ::= LOCVARDEC   
LOCVARSTAT ::= STATMT
LOCVARDEC ::= localvar id A4 : TYPE A1 AROBJ ; C3
TYPE ::= integer   
TYPE ::= float
TYPE ::= id 
AROBJ ::= A5 REPTARSIZ C2
AROBJ ::= ( APRMS )
REPTARSIZ ::= ARRSIZE REPTARSIZ   
REPTARSIZ ::= ''
ARRSIZE ::= [ ARRSIZE2 
ARRSIZE2 ::= intlit A7 ] 
ARRSIZE2 ::= ]
REPTVARSTAT ::= LOCVARSTAT REPTVARSTAT
REPTVARSTAT ::= ''
FUNBODY ::= A5 { REPTVARSTAT } C1
FUNDEF ::= FUNHEAD FUNBODY C11
FUNHEAD ::= function A11 id A4 FUNHEADTAIL
FUNHEADTAIL ::= sr FUNHEADMEMTAIL
FUNHEADTAIL ::= ( FPARM ) arrow RETTYPE C13
FUNHEADMEMTAIL ::= id A4 ( FPARM ) arrow RETTYPE C14
FUNHEADMEMTAIL ::= constructor ( FPARM ) D6
RETTYPE ::= TYPE A1 
RETTYPE ::= void A1
FPARM ::= A5 id A4 : TYPE A1 A5 REPTPRM3 C2 E7 REPTPRM4 C5
FPARM ::= ''
REPTPRM3 ::= ARRSIZE REPTPRM3  
REPTPRM3 ::= '' 
REPTPRM4 ::= FPARMTAIL REPTPRM4  
REPTPRM4 ::= ''
FPARMTAIL ::= , id A4 : TYPE A1 A5 REPTPRMTAIL C2 C4
REPTPRMTAIL ::= ARRSIZE REPTPRMTAIL  
REPTPRMTAIL ::= '' 
MEMFUNDEC ::= MEMFUNHEAD ;  
MEMFUNHEAD ::= function id A4 : ( FPARM ) arrow RETTYPE C7
MEMFUNHEAD ::= constructor : ( FPARM ) D6
MEMDECL ::= MEMFUNDEC  
MEMDECL ::= MEMVARDECL 
REPTMEMDECL ::= VIS A12 MEMDECL D1 REPTMEMDECL  
REPTMEMDECL ::= '' 
VIS ::= public
VIS ::= private
MEMVARDECL  ::= attribute E1 id A4 : TYPE A1 A5 REPTARSIZ C2 ; D3
CLSDEC ::= class A10 id A4 OPTITS A5 { REPTMEMDECL } C8 ; C9
CLSFUNDEC ::= CLSDEC
CLSFUNDEC ::= FUNDEF
REPTPROG ::= CLSFUNDEC REPTPROG   
REPTPROG ::= ''
OPTITS ::= isa A5 id A4 REPTLIST D2
OPTITS ::= '' 
REPTLIST   ::= , id A4 REPTLIST  
REPTLIST  ::= ''  

F1 ::= push(createsubtree(write,pop))
F2 ::= push(createsubtree(read,pop))
F3 ::= push(createsubtree(return,pop))
E1 ::= push(createLeaf(attribute))
E2 ::= push(createLeaf(floatLit))
E3 ::= push(createsubtree(then,pop))
E4 ::= push(createsubtree(else,pop))
E5 ::= push(createsubtree(not,pop))
E6 ::= push(createsubtree(=,pop))
E7 ::= push(createsubtree(FParm,pop,pop,pop))
D9 ::= push(createsubtree(while,pop,pop))
D8 ::= push(createsubtree(dot,pop,pop))
C11 ::= push(createsubtree(FunctionDec,pop,pop,pop,pop))
D1 ::= push(createsubtree(MEMBER,pop,pop))
D2 ::= push(createsubtree(isa,popuntillEPS))
D3 ::= push(createsubtree(MemberVarDec,pop,pop,pop))
D4 ::= push(createsubtree(functionMemberHead,pop,pop))
D6 ::= push(createsubtree(constructor,pop))
D5 ::= push(createsubtree(EXPR,pop,pop))
C1 ::= push(createsubtree(VARIABLE,popuntillEPS))
C2 ::= push(createsubtree(ARRSIZE,popuntillEPS))
C3 ::= push(createsubtree(localvar,pop,pop,pop))
C4 ::= push(createsubtree(FParms,pop,pop,pop))
C5 ::= push(createsubtree(FParmTailList,popuntillEPS))
C6 ::= push(createsubtree(FParms,pop,pop,pop,pop))
C7 ::= push(createsubtree(functionHead,pop,pop,pop,pop))
C8 ::= push(createsubtree(MemberList,popuntillEPS))
C9 ::= push(createsubtree(ClassDec,pop,pop,pop,pop))
C10 ::= push(createsubtree(Program,popuntillEPS))
C12 ::= push(createsubtree(List,popuntillEPS))
C13 ::= push(createsubtree(FunctionTail,pop,pop))
C14 ::= push(createsubtree(FunctionMemberTail,pop,pop,pop))
V1 ::= push(createsubtree(VariableList,popuntillEPS))
V2 ::= push(createsubtree(ArithExpr,popuntillEPS))
V3 ::= push(createsubtree(IndiceList,popuntillEPS))
V4 ::= push(createsubtree(ArithExpr,pop,pop))
V5 ::= push(createsubtree(relop,pop,pop))
V6 ::= push(createsubtree(StatmentList,popuntillEPS))
V7 ::= push(createsubtree(IDNEST,popuntillEPS))
V8 ::= push(createsubtree(AParmList,popuntillEPS))
V9 ::= push(createsubtree(EXPR,popuntillEPS))
V10 ::= push(createsubtree(Factor,pop,pop))
V11 ::= push(createsubtree(Variable,pop,pop))
V13 ::= push(createsubtree(TermTail,popuntillEPS))
V14 ::= push(createsubtree(Factor,pop,pop,pop))
V15 ::= push(createsubtree(Aparms,pop,pop))
V16 ::= push(createsubtree(VariableTail,pop,pop))
V17 ::= push(createsubtree(VarId2,pop,pop))
V18 ::= push(createsubtree(read,pop,pop))
V19 ::= push(createsubtree(=,pop))
B1 ::= push(createsubtree(StatmentIdnest,popuntillEPS))
B2 ::= push(createsubtree(Statment,pop,pop))
B3 ::= push(createsubtree(StatmentIdnest,pop,pop))
B4 ::= push(createsubtree(if,pop,pop,pop))
B5 ::= push(createsubtree(StatmentIdnest,pop,pop,pop))
B6 ::= push(createsubtree(dot,pop,pop))
B7 ::= push(createsubtree(multop,pop))
B8 ::= push(createsubtree(addop,pop))
B9 ::= push(createsubtree(StatIdnest2,popuntillEPS))
A1 ::= push(createLeaf(type))
A2 ::= push(createLeaf(not))
A3 ::= push(createLeaf(sign))
A4 ::= push(createLeaf(id))
A5 ::= push(EPS)
A6 ::= push(createLeaf(relop))
A7 ::= push(createLeaf(intLit))
A8 ::= push(createLeaf(isa))
A9 ::= push(createLeaf(constructor))
A10 ::= push(createLeaf(class))
A11 ::= push(createLeaf(function))
A12 ::= push(createLeaf(visiblity))
