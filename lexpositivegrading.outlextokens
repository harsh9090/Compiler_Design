[inlinecmt,  ====== struct declarations ====== //, 1], 
[class, class, 2], [id, POLYNOMIAL, 2], [Opencubr, {, 2], 
[public, public, 3], [function, function, 3], [id, evaluate, 3], [Colon, :, 3], [Openpar, (, 3], [id, x, 3], [Colon, :, 3], [float, float, 3], [Closepar, ), 3], [arrow, =>, 3], [float, float, 3], [Semi, ;, 3], 
[Closecubr, }, 4], [Semi, ;, 4], 
[class, class, 6], [id, LINEAR, 6], [isa, isa, 6], [id, POLYNOMIAL, 6], [Opencubr, {, 6], 
[private, private, 7], [attribute, attribute, 7], [id, a, 7], [Colon, :, 7], [float, float, 7], [Semi, ;, 7], 
[private, private, 8], [attribute, attribute, 8], [id, b, 8], [Colon, :, 8], [float, float, 8], [Semi, ;, 8], 
[public, public, 9], [constructor, constructor, 9], [Colon, :, 9], [Openpar, (, 9], [id, A, 9], [Colon, :, 9], [float, float, 9], [Comma, ,, 9], [id, B, 9], [Colon, :, 9], [float, float, 9], [Closepar, ), 9], [Semi, ;, 9], 
[public, public, 10], [function, function, 10], [id, evaluate, 10], [Colon, :, 10], [Openpar, (, 10], [id, x, 10], [Colon, :, 10], [float, float, 10], [Closepar, ), 10], [arrow, =>, 10], [float, float, 10], [Semi, ;, 10], 
[Closecubr, }, 11], [Semi, ;, 11], 
[class, class, 13], [id, QUADRATIC, 13], [isa, isa, 13], [id, POLYNOMIAL, 13], [Opencubr, {, 13], 
[private, private, 14], [attribute, attribute, 14], [id, a, 14], [Colon, :, 14], [float, float, 14], [Semi, ;, 14], 
[private, private, 15], [attribute, attribute, 15], [id, b, 15], [Colon, :, 15], [float, float, 15], [Semi, ;, 15], 
[private, private, 16], [attribute, attribute, 16], [id, c, 16], [Colon, :, 16], [float, float, 16], [Semi, ;, 16], 
[public, public, 17], [constructor, constructor, 17], [Colon, :, 17], [Openpar, (, 17], [id, A, 17], [Colon, :, 17], [float, float, 17], [Comma, ,, 17], [id, B, 17], [Colon, :, 17], [float, float, 17], [Comma, ,, 17], [id, C, 17], [Colon, :, 17], [float, float, 17], [Closepar, ), 17], [Semi, ;, 17], 
[public, public, 18], [function, function, 18], [id, evaluate, 18], [Colon, :, 18], [Openpar, (, 18], [id, x, 18], [Colon, :, 18], [float, float, 18], [Closepar, ), 18], [arrow, =>, 18], [float, float, 18], [Semi, ;, 18], 
[Closecubr, }, 19], [Semi, ;, 19], 
[inlinecmt,  ====== member function implementations ====== //  , 21], 
[function, function, 22], [id, POLYNOMIAL, 22], [sr, ::, 22], [id, evaluate, 22], [Openpar, (, 22], [id, x, 22], [Colon, :, 22], [float, float, 22], [Closepar, ), 22], [arrow, =>, 22], [float, float, 22], 
[Opencubr, {, 23], 
[return, return, 24], [Openpar, (, 24], [intLit, 0, 24], [Closepar, ), 24], [Semi, ;, 24], 
[Closecubr, }, 25], 
[function, function, 27], [id, QUADRATIC, 27], [sr, ::, 27], [id, evaluate, 27], [Openpar, (, 27], [id, x, 27], [Colon, :, 27], [float, float, 27], [Closepar, ), 27], [arrow, =>, 27], [float, float, 27], 
[Opencubr, {, 28], 
[id, localVar, 29], [id, result, 29], [Colon, :, 29], [float, float, 29], [Semi, ;, 29], 
[inlinecmt, Using Horner's method, 30], 
[id, result, 31], [assign, =, 31], [id, a, 31], [Semi, ;, 31], 
[id, result, 32], [assign, =, 32], [id, result, 32], [Mult, *, 32], [id, x, 32], [Plus, +, 32], [id, b, 32], [Semi, ;, 32], 
[id, result, 33], [assign, =, 33], [id, result, 33], [Mult, *, 33], [id, x, 33], [Plus, +, 33], [id, c, 33], [Semi, ;, 33], 
[return, return, 34], [Openpar, (, 34], [id, result, 34], [Closepar, ), 34], [Semi, ;, 34], 
[Closecubr, }, 35], 
[function, function, 37], [id, QUADRATIC, 37], [sr, ::, 37], [constructor, constructor, 37], [Openpar, (, 37], [id, A, 37], [Colon, :, 37], [float, float, 37], [Comma, ,, 37], [id, B, 37], [Colon, :, 37], [float, float, 37], [Comma, ,, 37], [id, C, 37], [Colon, :, 37], [float, float, 37], [Closepar, ), 37], 
[Opencubr, {, 38], 
[inlinecmt, self.a = A;, 39], 
[inlinecmt, self.b = B;, 40], 
[inlinecmt, self.c = C;, 41], 
[Closecubr, }, 42], 
[function, function, 44], [id, LINEAR, 44], [sr, ::, 44], [constructor, constructor, 44], [Openpar, (, 44], [id, A, 44], [Colon, :, 44], [float, float, 44], [Comma, ,, 44], [id, B, 44], [Colon, :, 44], [float, float, 44], [Closepar, ), 44], 
[Opencubr, {, 45], 
[inlinecmt, self.a = A;, 46], 
[inlinecmt, self.b = B;, 47], 
[Closecubr, }, 48], 
[function, function, 50], [id, LINEAR, 50], [sr, ::, 50], [id, evaluate, 50], [Openpar, (, 50], [id, x, 50], [Colon, :, 50], [float, float, 50], [Closepar, ), 50], [arrow, =>, 50], [float, float, 50], 
[Opencubr, {, 51], 
[id, localVar, 52], [id, result, 52], [Colon, :, 52], [float, float, 52], [Semi, ;, 52], 
[id, result, 53], [assign, =, 53], [floatLit, 0.0, 53], [Semi, ;, 53], 
[id, result, 54], [assign, =, 54], [id, a, 54], [Mult, *, 54], [id, x, 54], [Plus, +, 54], [id, b, 54], [Semi, ;, 54], 
[return, return, 55], [Openpar, (, 55], [id, result, 55], [Closepar, ), 55], [Semi, ;, 55], 
[Closecubr, }, 56], 
[inlinecmt,  ====== main ====== //, 58], 
[function, function, 59], [id, main, 59], [Openpar, (, 59], [Closepar, ), 59], [arrow, =>, 59], [void, void, 59], 
[Opencubr, {, 60], 
[id, localVar, 61], [id, f1, 61], [Colon, :, 61], [id, LINEAR, 61], [Openpar, (, 61], [intLit, 2, 61], [Comma, ,, 61], [floatLit, 3.5, 61], [Closepar, ), 61], [Semi, ;, 61], 
[id, localVar, 62], [id, f2, 62], [Colon, :, 62], [id, QUADRATIC, 62], [Openpar, (, 62], [Minus, -, 62], [floatLit, 2.0, 62], [Comma, ,, 62], [floatLit, 1.0, 62], [Comma, ,, 62], [floatLit, 0.0, 62], [Closepar, ), 62], [Semi, ;, 62], 
[id, localVar, 63], [id, counter, 63], [Colon, :, 63], [integer, integer, 63], [Semi, ;, 63], 
[id, integ, 65], [assign, =, 65], [intLit, 1, 65], [Semi, ;, 65], 
[while, while, 67], [Openpar, (, 67], [id, counter, 67], [leq, <=, 67], [intLit, 10, 67], [Closepar, ), 67], 
[Opencubr, {, 68], 
[write, write, 69], [Openpar, (, 69], [id, counter, 69], [Closepar, ), 69], [Semi, ;, 69], 
[write, write, 70], [Openpar, (, 70], [id, f1, 70], [dot, ., 70], [id, evaluate, 70], [Openpar, (, 70], [id, counter, 70], [Closepar, ), 70], [Closepar, ), 70], [Semi, ;, 70], 
[write, write, 71], [Openpar, (, 71], [id, f2, 71], [dot, ., 71], [id, evaluate, 71], [Openpar, (, 71], [id, counter, 71], [Closepar, ), 71], [Closepar, ), 71], [Semi, ;, 71], 
[Closecubr, }, 72], [Semi, ;, 72], 
[Closecubr, }, 73], 
[Blockcmt,     classes    --------------------------------------| | no class declaration| | class declaration|X| multiple class declarations|X| no data member declaration|X| data member declaration|X| multiple data member declaration| | no member function declaration|X| member function declaration|X| multiple member function declaration| | no member|X| no inherited class|X| one inherited class| | multiple inherited classes|X| private member specifier|X| public member specifier    functions: definitions    --------------------------------------| | no main function definition|X| main function definition|X| no free function definition| | free function definition| | multiple free function definitions| | no member function definition|X| member function definition|X| multiple member function definitions| | return type: void| | return type: integer|X| return type: float|X| return type: id| | return type: array (not allowed)    functions: formal parameters    --------------------------------------| | type: integer|X| type: float| | type: id| | type: 1-dim array | | type: n-dim array| | type: array (with size)| | type: array (without size)    functions: calls    --------------------------------------| | free function call|X| member function call| | parameters:0|X| parameters:1|X| parameters:n| | array parameter - 1-dim| | array parameter - n-dim| | array parameter - with size| | array parameter - without size| | function call as statement|X| function call as expression factor| | expression as parameter    variable declaration    --------------------------------------| | type: integer| | type: float| | type: string|X| type: id| | type: 1-dim array | | type: n-dim array| | type: array (with size)| | type: array (without size)    function body: local variable declarations    --------------------------------------| | no local variable declarations|X| local variable declarations| | intertwined statements and variable declarations    function body: statements    --------------------------------------| | no statement| | 1 statement|X| n statements| | if statement| | if: empty then or else blocks| | if: 1-statement then or else blocks| | if: n-statements then or else blocks|X| while statement| | while: empty block| | while: 1-statement block|X| while: n-statement block| | read(<variable>) statement|X| write(<expr>) statement|X| return(<expr>) statement|X| assignment statement    variable + idnest    --------------------------------------|X| id|X| id.id|X| id.id(id)| | id(id).id| | id(id).id()| | id.id[id]| | id[id].id| | id[id].id[id]| | id.id[id][id]| | id[id][id].id| | id[id][id].id[id][id]| | id(id).id[id]| | id(id).id[id][id]| | expression as array index    expressions    --------------------------------------| | single variable| | involving addop| | involving multop| | involving relop|X| involving addop + multop| | involving multop + relop| | involving addop + multop + relop| | involving parentheses| | involving nested parenhteses| | involving not| | involving sign| | involving literals|X| involving variable + idnest|X| involving function calls| | involving all the above in one expression*, 74], 