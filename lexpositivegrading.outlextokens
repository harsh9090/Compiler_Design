[function, function, 1], [id, POLYNOMIAL, 1], [sr, ::, 1], [id, evaluate, 1], [Openpar, (, 1], [id, x, 1], [Colon, :, 1], [float, float, 1], [Closepar, ), 1], [arrow, =>, 1], [float, float, 1], 
[Opencubr, {, 2], 
[return, return, 3], [Openpar, (, 3], [intLit, 0, 3], [Closepar, ), 3], [Semi, ;, 3], 
[Closecubr, }, 4], 
[function, function, 6], [id, QUADRATIC, 6], [sr, ::, 6], [id, evaluate, 6], [Openpar, (, 6], [id, x, 6], [Colon, :, 6], [float, float, 6], [Closepar, ), 6], [arrow, =>, 6], [float, float, 6], 
[Opencubr, {, 7], 
[id, localVar, 8], [id, result, 8], [Colon, :, 8], [float, float, 8], [Semi, ;, 8], 
[inlinecmt, Using Horner's method, 9], 
[id, result, 10], [assign, =, 10], [id, a, 10], [Semi, ;, 10], 
[id, result, 11], [assign, =, 11], [id, result, 11], [Mult, *, 11], [id, x, 11], [Plus, +, 11], [id, b, 11], [Semi, ;, 11], 
[id, result, 12], [assign, =, 12], [id, result, 12], [Mult, *, 12], [id, x, 12], [Plus, +, 12], [id, c, 12], [Semi, ;, 12], 
[return, return, 13], [Openpar, (, 13], [id, result, 13], [Closepar, ), 13], [Semi, ;, 13], 
[Closecubr, }, 14], 
[function, function, 16], [id, QUADRATIC, 16], [sr, ::, 16], [constructor, constructor, 16], [Openpar, (, 16], [id, A, 16], [Colon, :, 16], [float, float, 16], [Comma, ,, 16], [id, B, 16], [Colon, :, 16], [float, float, 16], [Comma, ,, 16], [id, C, 16], [Colon, :, 16], [float, float, 16], [Closepar, ), 16], 
[Opencubr, {, 17], 
[id, s, 18], [dot, ., 18], [id, a, 18], [assign, =, 18], [id, A, 18], [dot, ., 18], [Semi, ;, 18], 
[id, sf, 19], [dot, ., 19], [id, b, 19], [assign, =, 19], [id, B, 19], [Semi, ;, 19], 
[id, s, 20], [dot, ., 20], [id, c, 20], [assign, =, 20], [id, C, 20], [Semi, ;, 20], 
[Closecubr, }, 21], 
[function, function, 23], [id, LINEAR, 23], [sr, ::, 23], [constructor, constructor, 23], [Openpar, (, 23], [id, A, 23], [Colon, :, 23], [float, float, 23], [Comma, ,, 23], [id, B, 23], [Colon, :, 23], [float, float, 23], [Closepar, ), 23], 
[Opencubr, {, 24], 
[id, slf, 25], [dot, ., 25], [id, a, 25], [assign, =, 25], [id, A, 25], [Semi, ;, 25], 
[id, slf, 26], [dot, ., 26], [id, b, 26], [assign, =, 26], [id, B, 26], [Semi, ;, 26], 
[Closecubr, }, 27], 
[function, function, 29], [id, LINEAR, 29], [sr, ::, 29], [id, evaluate, 29], [Openpar, (, 29], [id, x, 29], [Colon, :, 29], [float, float, 29], [Closepar, ), 29], [arrow, =>, 29], [float, float, 29], 
[Opencubr, {, 30], 
[id, localVar, 31], [id, result, 31], [Colon, :, 31], [float, float, 31], [Semi, ;, 31], 
[id, result, 32], [assign, =, 32], [floatLit, 0.0, 32], [Semi, ;, 32], 
[id, result, 33], [assign, =, 33], [id, a, 33], [Mult, *, 33], [id, x, 33], [Plus, +, 33], [id, b, 33], [Semi, ;, 33], 
[return, return, 34], [Openpar, (, 34], [id, result, 34], [Closepar, ), 34], [Semi, ;, 34], 
[Closecubr, }, 35], 
[inlinecmt,  ====== main ====== //, 36], 
[function, function, 37], [id, main, 37], [Openpar, (, 37], [Closepar, ), 37], [arrow, =>, 37], [void, void, 37], 
[Opencubr, {, 38], 
[id, localVar, 39], [id, f1, 39], [Colon, :, 39], [id, LINEAR, 39], [Openpar, (, 39], [intLit, 2, 39], [Comma, ,, 39], [floatLit, 3.5, 39], [Closepar, ), 39], [Semi, ;, 39], 
[id, localVar, 40], [id, f2, 40], [Colon, :, 40], [id, QUADRATIC, 40], [Openpar, (, 40], [Minus, -, 40], [floatLit, 2.0, 40], [Comma, ,, 40], [floatLit, 1.0, 40], [Comma, ,, 40], [floatLit, 0.0, 40], [Closepar, ), 40], [Semi, ;, 40], 
[id, localVar, 41], [id, counter, 41], [Colon, :, 41], [integer, integer, 41], [Semi, ;, 41], 
[id, intg, 42], [assign, =, 42], [intLit, 1, 42], [Semi, ;, 42], 
[while, while, 44], [Openpar, (, 44], [id, counter, 44], [leq, <=, 44], [intLit, 10, 44], [Closepar, ), 44], 
[Opencubr, {, 45], 
[write, write, 46], [Openpar, (, 46], [id, counter, 46], [Closepar, ), 46], [Semi, ;, 46], 
[write, write, 47], [Openpar, (, 47], [id, f1, 47], [dot, ., 47], [id, evaluate, 47], [Openpar, (, 47], [id, counter, 47], [Closepar, ), 47], [Closepar, ), 47], [Semi, ;, 47], 
[write, write, 48], [Openpar, (, 48], [id, f2, 48], [dot, ., 48], [id, evaluate, 48], [Openpar, (, 48], [id, counter, 48], [Closepar, ), 48], [Closepar, ), 48], [Semi, ;, 48], 
[Closecubr, }, 49], [Semi, ;, 49], 
[Closecubr, }, 50], 
[Blockcmt,     classes    --------------------------------------| | no class declaration| | class declaration|X| multiple class declarations|X| no data member declaration|X| data member declaration|X| multiple data member declaration| | no member function declaration|X| member function declaration|X| multiple member function declaration| | no member|X| no inherited class|X| one inherited class| | multiple inherited classes|X| private member specifier|X| public member specifier    functions: definitions    --------------------------------------| | no main function definition|X| main function definition|X| no free function definition| | free function definition| | multiple free function definitions| | no member function definition|X| member function definition|X| multiple member function definitions| | return type: void| | return type: integer|X| return type: float|X| return type: id| | return type: array (not allowed)    functions: formal parameters    --------------------------------------| | type: integer|X| type: float| | type: id| | type: 1-dim array | | type: n-dim array| | type: array (with size)| | type: array (without size)    functions: calls    --------------------------------------| | free function call|X| member function call| | parameters:0|X| parameters:1|X| parameters:n| | array parameter - 1-dim| | array parameter - n-dim| | array parameter - with size| | array parameter - without size| | function call as statement|X| function call as expression factor| | expression as parameter    variable declaration    --------------------------------------| | type: integer| | type: float| | type: string|X| type: id| | type: 1-dim array | | type: n-dim array| | type: array (with size)| | type: array (without size)    function body: local variable declarations    --------------------------------------| | no local variable declarations|X| local variable declarations| | intertwined statements and variable declarations    function body: statements    --------------------------------------| | no statement| | 1 statement|X| n statements| | if statement| | if: empty then or else blocks| | if: 1-statement then or else blocks| | if: n-statements then or else blocks|X| while statement| | while: empty block| | while: 1-statement block|X| while: n-statement block| | read(<variable>) statement|X| write(<expr>) statement|X| return(<expr>) statement|X| assignment statement    variable + idnest    --------------------------------------|X| id|X| id.id|X| id.id(id)| | id(id).id| | id(id).id()| | id.id[id]| | id[id].id| | id[id].id[id]| | id.id[id][id]| | id[id][id].id| | id[id][id].id[id][id]| | id(id).id[id]| | id(id).id[id][id]| | expression as array index    expressions    --------------------------------------| | single variable| | involving addop| | involving multop| | involving relop|X| involving addop + multop| | involving multop + relop| | involving addop + multop + relop| | involving parentheses| | involving nested parenhteses| | involving not| | involving sign| | involving literals|X| involving variable + idnest|X| involving function calls| | involving all the above in one expression*, 51], 