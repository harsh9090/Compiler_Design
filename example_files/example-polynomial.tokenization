Comment: -  ====== struct declarations ====== // 
class class  
class class POLYNOMIAL  
class class POLYNOMIAL {  
class class POLYNOMIAL { public  
class class POLYNOMIAL { public function  
class class POLYNOMIAL { public function evaluate  
class class POLYNOMIAL { public function evaluate :  
class class POLYNOMIAL { public function evaluate : (  
class class POLYNOMIAL { public function evaluate : ( x  
class class POLYNOMIAL { public function evaluate : ( x :  
class class POLYNOMIAL { public function evaluate : ( x : integer  
class class POLYNOMIAL { public function evaluate : ( x : integer )  
class class POLYNOMIAL { public function evaluate : ( x : integer ) =>  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ;  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; }  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ;  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL {  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a :  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ;  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b :  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ;  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor :  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : (  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A :  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer ,  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B :  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer )  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ;  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate :  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : (  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x :  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer )  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) =>  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ;  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; }  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ;  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL {  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a :  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ;  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b :  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ;  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c :  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ;  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor :  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : (  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A :  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer ,  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B :  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer ,  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C :  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer )  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ;  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate :  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : (  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x :  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer )  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) =>  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ;  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; }  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ;  
Comment: -  ====== member function implementations ====== //   
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL ::  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate (  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x :  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer )  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) =>  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer {  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return (  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 )  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ;  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; }  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC ::  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate (  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x :  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer )  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) =>  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer {  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result :  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ;  
Comment: - Using Horner's method 
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result =  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ;  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result =  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result *  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x +  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ;  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result =  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result *  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x +  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ;  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return (  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result )  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ;  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; }  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC ::  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor (  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A :  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer ,  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B :  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer ,  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C :  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer )  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) {  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self .  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a =  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ;  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self .  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b =  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ;  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self .  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c =  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ;  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; }  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR ::  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor (  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A :  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer ,  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B :  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer )  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) {  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self .  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a =  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ;  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self .  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b =  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b = B  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b = B ;  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b = B ; }  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b = B ; } function  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b = B ; } function LINEAR  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b = B ; } function LINEAR ::  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate (  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x :  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : integer  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : integer )  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : integer ) =>  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : integer ) => integer  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : integer ) => integer {  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : integer ) => integer { localvar  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : integer ) => integer { localvar result  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : integer ) => integer { localvar result :  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : integer ) => integer { localvar result : integer  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : integer ) => integer { localvar result : integer ;  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : integer ) => integer { localvar result : integer ; result  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : integer ) => integer { localvar result : integer ; result =  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : integer ) => integer { localvar result : integer ; result = 0  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : integer ) => integer { localvar result : integer ; result = 0 ;  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : integer ) => integer { localvar result : integer ; result = 0 ; result  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : integer ) => integer { localvar result : integer ; result = 0 ; result =  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : integer ) => integer { localvar result : integer ; result = 0 ; result = a  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : integer ) => integer { localvar result : integer ; result = 0 ; result = a *  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : integer ) => integer { localvar result : integer ; result = 0 ; result = a * x  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : integer ) => integer { localvar result : integer ; result = 0 ; result = a * x +  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : integer ) => integer { localvar result : integer ; result = 0 ; result = a * x + b  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : integer ) => integer { localvar result : integer ; result = 0 ; result = a * x + b ;  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : integer ) => integer { localvar result : integer ; result = 0 ; result = a * x + b ; return  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : integer ) => integer { localvar result : integer ; result = 0 ; result = a * x + b ; return (  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : integer ) => integer { localvar result : integer ; result = 0 ; result = a * x + b ; return ( result  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : integer ) => integer { localvar result : integer ; result = 0 ; result = a * x + b ; return ( result )  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : integer ) => integer { localvar result : integer ; result = 0 ; result = a * x + b ; return ( result ) ;  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : integer ) => integer { localvar result : integer ; result = 0 ; result = a * x + b ; return ( result ) ; }  
Comment: -  ====== main ====== // 
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : integer ) => integer { localvar result : integer ; result = 0 ; result = a * x + b ; return ( result ) ; } function function  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : integer ) => integer { localvar result : integer ; result = 0 ; result = a * x + b ; return ( result ) ; } function function main  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : integer ) => integer { localvar result : integer ; result = 0 ; result = a * x + b ; return ( result ) ; } function function main (  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : integer ) => integer { localvar result : integer ; result = 0 ; result = a * x + b ; return ( result ) ; } function function main ( )  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : integer ) => integer { localvar result : integer ; result = 0 ; result = a * x + b ; return ( result ) ; } function function main ( ) =>  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : integer ) => integer { localvar result : integer ; result = 0 ; result = a * x + b ; return ( result ) ; } function function main ( ) => void  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : integer ) => integer { localvar result : integer ; result = 0 ; result = a * x + b ; return ( result ) ; } function function main ( ) => void {  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : integer ) => integer { localvar result : integer ; result = 0 ; result = a * x + b ; return ( result ) ; } function function main ( ) => void { localvar  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : integer ) => integer { localvar result : integer ; result = 0 ; result = a * x + b ; return ( result ) ; } function function main ( ) => void { localvar f1  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : integer ) => integer { localvar result : integer ; result = 0 ; result = a * x + b ; return ( result ) ; } function function main ( ) => void { localvar f1 :  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : integer ) => integer { localvar result : integer ; result = 0 ; result = a * x + b ; return ( result ) ; } function function main ( ) => void { localvar f1 : LINEAR  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : integer ) => integer { localvar result : integer ; result = 0 ; result = a * x + b ; return ( result ) ; } function function main ( ) => void { localvar f1 : LINEAR (  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : integer ) => integer { localvar result : integer ; result = 0 ; result = a * x + b ; return ( result ) ; } function function main ( ) => void { localvar f1 : LINEAR ( 2  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : integer ) => integer { localvar result : integer ; result = 0 ; result = a * x + b ; return ( result ) ; } function function main ( ) => void { localvar f1 : LINEAR ( 2 ,  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : integer ) => integer { localvar result : integer ; result = 0 ; result = a * x + b ; return ( result ) ; } function function main ( ) => void { localvar f1 : LINEAR ( 2 , 3  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : integer ) => integer { localvar result : integer ; result = 0 ; result = a * x + b ; return ( result ) ; } function function main ( ) => void { localvar f1 : LINEAR ( 2 , 3 )  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : integer ) => integer { localvar result : integer ; result = 0 ; result = a * x + b ; return ( result ) ; } function function main ( ) => void { localvar f1 : LINEAR ( 2 , 3 ) ;  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : integer ) => integer { localvar result : integer ; result = 0 ; result = a * x + b ; return ( result ) ; } function function main ( ) => void { localvar f1 : LINEAR ( 2 , 3 ) ; localvar  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : integer ) => integer { localvar result : integer ; result = 0 ; result = a * x + b ; return ( result ) ; } function function main ( ) => void { localvar f1 : LINEAR ( 2 , 3 ) ; localvar f2  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : integer ) => integer { localvar result : integer ; result = 0 ; result = a * x + b ; return ( result ) ; } function function main ( ) => void { localvar f1 : LINEAR ( 2 , 3 ) ; localvar f2 :  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : integer ) => integer { localvar result : integer ; result = 0 ; result = a * x + b ; return ( result ) ; } function function main ( ) => void { localvar f1 : LINEAR ( 2 , 3 ) ; localvar f2 : QUADRATIC  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : integer ) => integer { localvar result : integer ; result = 0 ; result = a * x + b ; return ( result ) ; } function function main ( ) => void { localvar f1 : LINEAR ( 2 , 3 ) ; localvar f2 : QUADRATIC (  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : integer ) => integer { localvar result : integer ; result = 0 ; result = a * x + b ; return ( result ) ; } function function main ( ) => void { localvar f1 : LINEAR ( 2 , 3 ) ; localvar f2 : QUADRATIC ( -  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : integer ) => integer { localvar result : integer ; result = 0 ; result = a * x + b ; return ( result ) ; } function function main ( ) => void { localvar f1 : LINEAR ( 2 , 3 ) ; localvar f2 : QUADRATIC ( - 2  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : integer ) => integer { localvar result : integer ; result = 0 ; result = a * x + b ; return ( result ) ; } function function main ( ) => void { localvar f1 : LINEAR ( 2 , 3 ) ; localvar f2 : QUADRATIC ( - 2 ,  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : integer ) => integer { localvar result : integer ; result = 0 ; result = a * x + b ; return ( result ) ; } function function main ( ) => void { localvar f1 : LINEAR ( 2 , 3 ) ; localvar f2 : QUADRATIC ( - 2 , 1  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : integer ) => integer { localvar result : integer ; result = 0 ; result = a * x + b ; return ( result ) ; } function function main ( ) => void { localvar f1 : LINEAR ( 2 , 3 ) ; localvar f2 : QUADRATIC ( - 2 , 1 ,  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : integer ) => integer { localvar result : integer ; result = 0 ; result = a * x + b ; return ( result ) ; } function function main ( ) => void { localvar f1 : LINEAR ( 2 , 3 ) ; localvar f2 : QUADRATIC ( - 2 , 1 , 0  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : integer ) => integer { localvar result : integer ; result = 0 ; result = a * x + b ; return ( result ) ; } function function main ( ) => void { localvar f1 : LINEAR ( 2 , 3 ) ; localvar f2 : QUADRATIC ( - 2 , 1 , 0 )  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : integer ) => integer { localvar result : integer ; result = 0 ; result = a * x + b ; return ( result ) ; } function function main ( ) => void { localvar f1 : LINEAR ( 2 , 3 ) ; localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ;  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : integer ) => integer { localvar result : integer ; result = 0 ; result = a * x + b ; return ( result ) ; } function function main ( ) => void { localvar f1 : LINEAR ( 2 , 3 ) ; localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : integer ) => integer { localvar result : integer ; result = 0 ; result = a * x + b ; return ( result ) ; } function function main ( ) => void { localvar f1 : LINEAR ( 2 , 3 ) ; localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar counter  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : integer ) => integer { localvar result : integer ; result = 0 ; result = a * x + b ; return ( result ) ; } function function main ( ) => void { localvar f1 : LINEAR ( 2 , 3 ) ; localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar counter :  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : integer ) => integer { localvar result : integer ; result = 0 ; result = a * x + b ; return ( result ) ; } function function main ( ) => void { localvar f1 : LINEAR ( 2 , 3 ) ; localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar counter : integer  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : integer ) => integer { localvar result : integer ; result = 0 ; result = a * x + b ; return ( result ) ; } function function main ( ) => void { localvar f1 : LINEAR ( 2 , 3 ) ; localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar counter : integer ;  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : integer ) => integer { localvar result : integer ; result = 0 ; result = a * x + b ; return ( result ) ; } function function main ( ) => void { localvar f1 : LINEAR ( 2 , 3 ) ; localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar counter : integer ; counter  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : integer ) => integer { localvar result : integer ; result = 0 ; result = a * x + b ; return ( result ) ; } function function main ( ) => void { localvar f1 : LINEAR ( 2 , 3 ) ; localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar counter : integer ; counter =  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : integer ) => integer { localvar result : integer ; result = 0 ; result = a * x + b ; return ( result ) ; } function function main ( ) => void { localvar f1 : LINEAR ( 2 , 3 ) ; localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar counter : integer ; counter = 1.1e-1  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : integer ) => integer { localvar result : integer ; result = 0 ; result = a * x + b ; return ( result ) ; } function function main ( ) => void { localvar f1 : LINEAR ( 2 , 3 ) ; localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar counter : integer ; counter = 1.1e-1 ;  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : integer ) => integer { localvar result : integer ; result = 0 ; result = a * x + b ; return ( result ) ; } function function main ( ) => void { localvar f1 : LINEAR ( 2 , 3 ) ; localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar counter : integer ; counter = 1.1e-1 ; while  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : integer ) => integer { localvar result : integer ; result = 0 ; result = a * x + b ; return ( result ) ; } function function main ( ) => void { localvar f1 : LINEAR ( 2 , 3 ) ; localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar counter : integer ; counter = 1.1e-1 ; while (  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : integer ) => integer { localvar result : integer ; result = 0 ; result = a * x + b ; return ( result ) ; } function function main ( ) => void { localvar f1 : LINEAR ( 2 , 3 ) ; localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar counter : integer ; counter = 1.1e-1 ; while ( counter  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : integer ) => integer { localvar result : integer ; result = 0 ; result = a * x + b ; return ( result ) ; } function function main ( ) => void { localvar f1 : LINEAR ( 2 , 3 ) ; localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar counter : integer ; counter = 1.1e-1 ; while ( counter <=  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : integer ) => integer { localvar result : integer ; result = 0 ; result = a * x + b ; return ( result ) ; } function function main ( ) => void { localvar f1 : LINEAR ( 2 , 3 ) ; localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar counter : integer ; counter = 1.1e-1 ; while ( counter <= 10  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : integer ) => integer { localvar result : integer ; result = 0 ; result = a * x + b ; return ( result ) ; } function function main ( ) => void { localvar f1 : LINEAR ( 2 , 3 ) ; localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar counter : integer ; counter = 1.1e-1 ; while ( counter <= 10 )  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : integer ) => integer { localvar result : integer ; result = 0 ; result = a * x + b ; return ( result ) ; } function function main ( ) => void { localvar f1 : LINEAR ( 2 , 3 ) ; localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar counter : integer ; counter = 1.1e-1 ; while ( counter <= 10 ) {  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : integer ) => integer { localvar result : integer ; result = 0 ; result = a * x + b ; return ( result ) ; } function function main ( ) => void { localvar f1 : LINEAR ( 2 , 3 ) ; localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar counter : integer ; counter = 1.1e-1 ; while ( counter <= 10 ) { write  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : integer ) => integer { localvar result : integer ; result = 0 ; result = a * x + b ; return ( result ) ; } function function main ( ) => void { localvar f1 : LINEAR ( 2 , 3 ) ; localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar counter : integer ; counter = 1.1e-1 ; while ( counter <= 10 ) { write (  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : integer ) => integer { localvar result : integer ; result = 0 ; result = a * x + b ; return ( result ) ; } function function main ( ) => void { localvar f1 : LINEAR ( 2 , 3 ) ; localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar counter : integer ; counter = 1.1e-1 ; while ( counter <= 10 ) { write ( counter  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : integer ) => integer { localvar result : integer ; result = 0 ; result = a * x + b ; return ( result ) ; } function function main ( ) => void { localvar f1 : LINEAR ( 2 , 3 ) ; localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar counter : integer ; counter = 1.1e-1 ; while ( counter <= 10 ) { write ( counter )  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : integer ) => integer { localvar result : integer ; result = 0 ; result = a * x + b ; return ( result ) ; } function function main ( ) => void { localvar f1 : LINEAR ( 2 , 3 ) ; localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar counter : integer ; counter = 1.1e-1 ; while ( counter <= 10 ) { write ( counter ) ;  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : integer ) => integer { localvar result : integer ; result = 0 ; result = a * x + b ; return ( result ) ; } function function main ( ) => void { localvar f1 : LINEAR ( 2 , 3 ) ; localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar counter : integer ; counter = 1.1e-1 ; while ( counter <= 10 ) { write ( counter ) ; write  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : integer ) => integer { localvar result : integer ; result = 0 ; result = a * x + b ; return ( result ) ; } function function main ( ) => void { localvar f1 : LINEAR ( 2 , 3 ) ; localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar counter : integer ; counter = 1.1e-1 ; while ( counter <= 10 ) { write ( counter ) ; write (  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : integer ) => integer { localvar result : integer ; result = 0 ; result = a * x + b ; return ( result ) ; } function function main ( ) => void { localvar f1 : LINEAR ( 2 , 3 ) ; localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar counter : integer ; counter = 1.1e-1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : integer ) => integer { localvar result : integer ; result = 0 ; result = a * x + b ; return ( result ) ; } function function main ( ) => void { localvar f1 : LINEAR ( 2 , 3 ) ; localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar counter : integer ; counter = 1.1e-1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 .  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : integer ) => integer { localvar result : integer ; result = 0 ; result = a * x + b ; return ( result ) ; } function function main ( ) => void { localvar f1 : LINEAR ( 2 , 3 ) ; localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar counter : integer ; counter = 1.1e-1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : integer ) => integer { localvar result : integer ; result = 0 ; result = a * x + b ; return ( result ) ; } function function main ( ) => void { localvar f1 : LINEAR ( 2 , 3 ) ; localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar counter : integer ; counter = 1.1e-1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate (  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : integer ) => integer { localvar result : integer ; result = 0 ; result = a * x + b ; return ( result ) ; } function function main ( ) => void { localvar f1 : LINEAR ( 2 , 3 ) ; localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar counter : integer ; counter = 1.1e-1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : integer ) => integer { localvar result : integer ; result = 0 ; result = a * x + b ; return ( result ) ; } function function main ( ) => void { localvar f1 : LINEAR ( 2 , 3 ) ; localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar counter : integer ; counter = 1.1e-1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter )  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : integer ) => integer { localvar result : integer ; result = 0 ; result = a * x + b ; return ( result ) ; } function function main ( ) => void { localvar f1 : LINEAR ( 2 , 3 ) ; localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar counter : integer ; counter = 1.1e-1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) )  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : integer ) => integer { localvar result : integer ; result = 0 ; result = a * x + b ; return ( result ) ; } function function main ( ) => void { localvar f1 : LINEAR ( 2 , 3 ) ; localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar counter : integer ; counter = 1.1e-1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ;  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : integer ) => integer { localvar result : integer ; result = 0 ; result = a * x + b ; return ( result ) ; } function function main ( ) => void { localvar f1 : LINEAR ( 2 , 3 ) ; localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar counter : integer ; counter = 1.1e-1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : integer ) => integer { localvar result : integer ; result = 0 ; result = a * x + b ; return ( result ) ; } function function main ( ) => void { localvar f1 : LINEAR ( 2 , 3 ) ; localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar counter : integer ; counter = 1.1e-1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write (  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : integer ) => integer { localvar result : integer ; result = 0 ; result = a * x + b ; return ( result ) ; } function function main ( ) => void { localvar f1 : LINEAR ( 2 , 3 ) ; localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar counter : integer ; counter = 1.1e-1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( f2  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : integer ) => integer { localvar result : integer ; result = 0 ; result = a * x + b ; return ( result ) ; } function function main ( ) => void { localvar f1 : LINEAR ( 2 , 3 ) ; localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar counter : integer ; counter = 1.1e-1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( f2 .  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : integer ) => integer { localvar result : integer ; result = 0 ; result = a * x + b ; return ( result ) ; } function function main ( ) => void { localvar f1 : LINEAR ( 2 , 3 ) ; localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar counter : integer ; counter = 1.1e-1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( f2 . evaluate  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : integer ) => integer { localvar result : integer ; result = 0 ; result = a * x + b ; return ( result ) ; } function function main ( ) => void { localvar f1 : LINEAR ( 2 , 3 ) ; localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar counter : integer ; counter = 1.1e-1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( f2 . evaluate (  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : integer ) => integer { localvar result : integer ; result = 0 ; result = a * x + b ; return ( result ) ; } function function main ( ) => void { localvar f1 : LINEAR ( 2 , 3 ) ; localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar counter : integer ; counter = 1.1e-1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( f2 . evaluate ( counter  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : integer ) => integer { localvar result : integer ; result = 0 ; result = a * x + b ; return ( result ) ; } function function main ( ) => void { localvar f1 : LINEAR ( 2 , 3 ) ; localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar counter : integer ; counter = 1.1e-1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( f2 . evaluate ( counter )  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : integer ) => integer { localvar result : integer ; result = 0 ; result = a * x + b ; return ( result ) ; } function function main ( ) => void { localvar f1 : LINEAR ( 2 , 3 ) ; localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar counter : integer ; counter = 1.1e-1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( f2 . evaluate ( counter ) )  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : integer ) => integer { localvar result : integer ; result = 0 ; result = a * x + b ; return ( result ) ; } function function main ( ) => void { localvar f1 : LINEAR ( 2 , 3 ) ; localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar counter : integer ; counter = 1.1e-1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( f2 . evaluate ( counter ) ) ;  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : integer ) => integer { localvar result : integer ; result = 0 ; result = a * x + b ; return ( result ) ; } function function main ( ) => void { localvar f1 : LINEAR ( 2 , 3 ) ; localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar counter : integer ; counter = 1.1e-1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( f2 . evaluate ( counter ) ) ; }  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : integer ) => integer { localvar result : integer ; result = 0 ; result = a * x + b ; return ( result ) ; } function function main ( ) => void { localvar f1 : LINEAR ( 2 , 3 ) ; localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar counter : integer ; counter = 1.1e-1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( f2 . evaluate ( counter ) ) ; } ;  
class class POLYNOMIAL { public function evaluate : ( x : integer ) => integer ; } ; class LINEAR isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; public constructor : ( A : integer , B : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; class QUADRATIC isa POLYNOMIAL { private attribute a : integer ; private attribute b : integer ; private attribute c : integer ; public constructor : ( A : integer , B : integer , C : integer ) ; public function evaluate : ( x : integer ) => integer ; } ; function function POLYNOMIAL :: evaluate ( x : integer ) => integer { return ( 0 ) ; } function QUADRATIC :: evaluate ( x : integer ) => integer { localvar result : integer ; result result = a ; result = result * x + b ; result = result * x + c ; return ( result ) ; } function QUADRATIC :: constructor ( A : integer , B : integer , C : integer ) { self . a = A ; self . b = B ; self . c = C ; } function LINEAR :: constructor ( A : integer , B : integer ) { self . a = A ; self . b = B ; } function LINEAR :: evaluate ( x : integer ) => integer { localvar result : integer ; result = 0 ; result = a * x + b ; return ( result ) ; } function function main ( ) => void { localvar f1 : LINEAR ( 2 , 3 ) ; localvar f2 : QUADRATIC ( - 2 , 1 , 0 ) ; localvar counter : integer ; counter = 1.1e-1 ; while ( counter <= 10 ) { write ( counter ) ; write ( f1 . evaluate ( counter ) ) ; write ( f2 . evaluate ( counter ) ) ; } ; }  
Comment: - /* 123 */    classes    --------------------------------------| | no class declaration| | class declaration|X| multiple class declarations|X| no data member declaration|X| data member declaration|X| multiple data member declaration| | no member function declaration|X| member function declaration|X| multiple member function declaration| | no member|X| no inherited class|X| one inherited class| | multiple inherited classes|X| private member specifier|X| public member specifier    functions: definitions    --------------------------------------| | no main function definition|X| main function definition|X| no free function definition| | free function definition| | multiple free function definitions| | no member function definition|X| member function definition|X| multiple member function definitions| | return type: void| | return type: integer|X| return type: integer|X| return type: id| | return type: array (not allowed)    functions: formal parameters    --------------------------------------| | type: integer|X| type: integer| | type: id| | type: 1-dim array | | type: n-dim array| | type: array (with size)| | type: array (without size)    functions: calls    --------------------------------------| | free function call|X| member function call| | parameters:0|X| parameters:1|X| parameters:n| | array parameter - 1-dim| | array parameter - n-dim| | array parameter - with size| | array parameter - without size| | function call as statement|X| function call as expression factor| | expression as parameter    variable declaration    --------------------------------------| | type: integer| | type: integer| | type: string|X| type: id| | type: 1-dim array | | type: n-dim array| | type: array (with size)| | type: array (without size)    function body: local variable declarations    --------------------------------------| | no local variable declarations|X| local variable declarations| | intertwined statements and variable declarations    function body: statements    --------------------------------------| | no statement| | 1 statement|X| n statements| | if statement| | if: empty then or else blocks| | if: 1-statement then or else blocks| | if: n-statements then or else blocks|X| while statement| | while: empty block| | while: 1-statement block|X| while: n-statement block| | read(<variable>) statement|X| write(<expr>) statement|X| return(<expr>) statement|X| assignment statement    variable + idnest    --------------------------------------|X| id|X| id.id|X| id.id(id)| | id(id).id| | id(id).id()| | id.id[id]| | id[id].id| | id[id].id[id]| | id.id[id][id]| | id[id][id].id| | id[id][id].id[id][id]| | id(id).id[id]| | id(id).id[id][id]| | expression as array index    expressions    --------------------------------------| | single variable| | involving addop| | involving multop| | involving relop|X| involving addop + multop| | involving multop + relop| | involving addop + multop + relop| | involving parentheses| | involving nested parenhteses| | involving not| | involving sign| | involving literals|X| involving variable + idnest|X| involving function calls| | involving all the above in one expression* 
