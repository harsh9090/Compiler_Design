[Blockcmt,  sort the array *, 1], 
[function, function, 2], [id, bubbleSort, 2], [Openpar, (, 2], [id, arr, 2], [Colon, :, 2], [integer, integer, 2], [Opensqbr, [, 2], [intLit, 8, 2], [Closesqbr, ], 2], [Opensqbr, [, 2], [intLit, 7, 2], [Closesqbr, ], 2], [Comma, ,, 2], [id, size, 2], [Colon, :, 2], [integer, integer, 2], [Closepar, ), 2], [arrow, =>, 2], [void, void, 2], 
[Opencubr, {, 3], 
[localvar, localvar, 4], [id, n, 4], [Colon, :, 4], [integer, integer, 4], [Semi, ;, 4], 
[localvar, localvar, 5], [id, i, 5], [Colon, :, 5], [integer, integer, 5], [Semi, ;, 5], 
[localvar, localvar, 6], [id, j, 6], [Colon, :, 6], [integer, integer, 6], [Semi, ;, 6], 
[localvar, localvar, 7], [id, temp, 7], [Colon, :, 7], [integer, integer, 7], [Semi, ;, 7], 
[localvar, localvar, 8], [id, bubble, 8], [Colon, :, 8], [integer, integer, 8], [Semi, ;, 8], 
[id, bubble, 9], [assign, =, 9], [intLit, 10, 9], [Semi, ;, 9], 
[id, n, 10], [assign, =, 10], [id, size, 10], [Semi, ;, 10], 
[id, i, 11], [assign, =, 11], [intLit, 0, 11], [Semi, ;, 11], 
[id, j, 12], [assign, =, 12], [intLit, 0, 12], [Semi, ;, 12], 
[id, temp, 13], [assign, =, 13], [intLit, 0, 13], [Semi, ;, 13], 
[while, while, 14], [Openpar, (, 14], [id, i, 14], [Lt, <, 14], [id, n, 14], [Minus, -, 14], [intLit, 1, 14], [Closepar, ), 14], [Opencubr, {, 14], 
[id, j, 15], [assign, =, 15], [intLit, 0, 15], [Semi, ;, 15], 
[while, while, 16], [Openpar, (, 16], [id, j, 16], [Lt, <, 16], [id, n, 16], [Minus, -, 16], [id, i, 16], [Minus, -, 16], [intLit, 1, 16], [Closepar, ), 16], [Opencubr, {, 16], 
[if, if, 17], [Openpar, (, 17], [id, arr, 17], [Opensqbr, [, 17], [id, j, 17], [Closesqbr, ], 17], [gt, >, 17], [id, arr, 17], [Opensqbr, [, 17], [id, j, 17], [Plus, +, 17], [intLit, 1, 17], [Closesqbr, ], 17], [Closepar, ), 17], 
[then, then, 18], [Opencubr, {, 18], 
[inlinecmt,  swap temp and arr[i], 19], 
[id, temp, 20], [assign, =, 20], [id, arr, 20], [Opensqbr, [, 20], [id, j, 20], [Closesqbr, ], 20], [Semi, ;, 20], 
[id, arr, 21], [Opensqbr, [, 21], [id, j, 21], [Closesqbr, ], 21], [assign, =, 21], [id, arr, 21], [Opensqbr, [, 21], [id, j, 21], [Plus, +, 21], [intLit, 1, 21], [Closesqbr, ], 21], [Semi, ;, 21], 
[id, arr, 22], [Opensqbr, [, 22], [id, j, 22], [Plus, +, 22], [intLit, 1, 22], [Closesqbr, ], 22], [assign, =, 22], [id, temp, 22], [Semi, ;, 22], 
[Closecubr, }, 23], [else, else, 23], [Semi, ;, 23], 
[id, j, 24], [assign, =, 24], [id, j, 24], [Plus, +, 24], [intLit, 1, 24], [Semi, ;, 24], 
[Closecubr, }, 25], [Semi, ;, 25], 
[id, i, 26], [assign, =, 26], [id, i, 26], [Plus, +, 26], [intLit, 1, 26], [Semi, ;, 26], 
[Closecubr, }, 27], [Semi, ;, 27], 
[Closecubr, }, 28], 
[Blockcmt,  print the array *, 30], 
[function, function, 31], [id, printArray, 31], [Openpar, (, 31], [id, arr, 31], [Colon, :, 31], [integer, integer, 31], [Opensqbr, [, 31], [intLit, 8, 31], [Closesqbr, ], 31], [Comma, ,, 31], [id, size, 31], [Colon, :, 31], [integer, integer, 31], [Closepar, ), 31], [arrow, =>, 31], [void, void, 31], 
[Opencubr, {, 32], 
[localvar, localvar, 33], [id, bubble, 33], [Colon, :, 33], [integer, integer, 33], [Semi, ;, 33], 
[id, bubble, 34], [assign, =, 34], [intLit, 10, 34], [Semi, ;, 34], 
[localvar, localvar, 35], [id, n, 35], [Colon, :, 35], [integer, integer, 35], [Semi, ;, 35], 
[localvar, localvar, 36], [id, i, 36], [Colon, :, 36], [integer, integer, 36], [Semi, ;, 36], 
[id, n, 37], [assign, =, 37], [id, size, 37], [Semi, ;, 37], 
[id, i, 38], [assign, =, 38], [intLit, 0, 38], [Semi, ;, 38], 
[while, while, 39], [Openpar, (, 39], [id, i, 39], [Lt, <, 39], [id, n, 39], [Closepar, ), 39], [Opencubr, {, 39], 
[write, write, 40], [Openpar, (, 40], [id, arr, 40], [Opensqbr, [, 40], [id, i, 40], [Closesqbr, ], 40], [Closepar, ), 40], [Semi, ;, 40], 
[id, i, 41], [assign, =, 41], [id, i, 41], [Plus, +, 41], [intLit, 1, 41], [Semi, ;, 41], 
[Closecubr, }, 42], [Semi, ;, 42], 
[Closecubr, }, 43], 
[function, function, 44], [id, checking, 44], [Openpar, (, 44], [id, x, 44], [Colon, :, 44], [integer, integer, 44], [Closepar, ), 44], [arrow, =>, 44], [void, void, 44], [Opencubr, {, 44], 
[write, write, 45], [Openpar, (, 45], [id, x, 45], [Closepar, ), 45], [Semi, ;, 45], 
[Closecubr, }, 46], 
[inlinecmt,  main funtion to test above, 47], 
[function, function, 48], [id, main, 48], [Openpar, (, 48], [Closepar, ), 48], [arrow, =>, 48], [void, void, 48], 
[Opencubr, {, 49], 
[localvar, localvar, 50], [id, arr, 50], [Colon, :, 50], [integer, integer, 50], [Opensqbr, [, 50], [intLit, 8, 50], [Closesqbr, ], 50], [Semi, ;, 50], 
[id, arr, 51], [Opensqbr, [, 51], [intLit, 0, 51], [Closesqbr, ], 51], [assign, =, 51], [intLit, 64, 51], [Semi, ;, 51], 
[id, arr, 52], [Opensqbr, [, 52], [intLit, 1, 52], [Closesqbr, ], 52], [assign, =, 52], [intLit, 34, 52], [Semi, ;, 52], 
[id, arr, 53], [Opensqbr, [, 53], [intLit, 2, 53], [Closesqbr, ], 53], [assign, =, 53], [intLit, 25, 53], [Semi, ;, 53], 
[id, arr, 54], [Opensqbr, [, 54], [intLit, 3, 54], [Closesqbr, ], 54], [assign, =, 54], [intLit, 12, 54], [Semi, ;, 54], 
[id, arr, 55], [Opensqbr, [, 55], [intLit, 4, 55], [Closesqbr, ], 55], [assign, =, 55], [intLit, 22, 55], [Semi, ;, 55], 
[id, arr, 56], [Opensqbr, [, 56], [intLit, 5, 56], [Closesqbr, ], 56], [assign, =, 56], [intLit, 11, 56], [Semi, ;, 56], 
[id, arr, 57], [Opensqbr, [, 57], [intLit, 6, 57], [Closesqbr, ], 57], [assign, =, 57], [intLit, 156, 57], [Semi, ;, 57], 
[id, arr, 58], [Opensqbr, [, 58], [intLit, 7, 58], [Closesqbr, ], 58], [assign, =, 58], [Minus, -, 58], [intLit, 1, 58], [Semi, ;, 58], 
[id, checking, 59], [Openpar, (, 59], [Minus, -, 59], [intLit, 100, 59], [Closepar, ), 59], [Semi, ;, 59], 
[id, printArray, 60], [Openpar, (, 60], [id, arr, 60], [Opensqbr, [, 60], [intLit, 8, 60], [Closesqbr, ], 60], [Comma, ,, 60], [intLit, 8, 60], [Closepar, ), 60], [Semi, ;, 60], 
[id, bubbleSort, 61], [Openpar, (, 61], [id, arr, 61], [Opensqbr, [, 61], [intLit, 8, 61], [Closesqbr, ], 61], [Comma, ,, 61], [intLit, 8, 61], [Closepar, ), 61], [Semi, ;, 61], 
[id, printArray, 62], [Openpar, (, 62], [id, arr, 62], [Opensqbr, [, 62], [intLit, 8, 62], [Closesqbr, ], 62], [Comma, ,, 62], [intLit, 8, 62], [Closepar, ), 62], [Semi, ;, 62], 
[Closecubr, }, 63], 
[Blockcmt,     classes    --------------------------------------|X| no class declaration| | class declaration| | multiple class declarations| | no data member declaration| | data member declaration| | multiple data member declaration| | no member function declaration| | member function declaration| | multiple member function declaration| | no member| | no inherited class| | one inherited class| | multiple inherited classes| | private member specifier| | public member specifier    functions: definitions    --------------------------------------| | no main function definition|X| main function definition| | no free function definition|X| free function definition|X| multiple free function definitions|X| no member function definition| | member function definition| | multiple member function definitions|X| return type: void| | return type: integer| | return type: float| | return type: id| | return type: array (not allowed)    functions: formal parameters    --------------------------------------|X| type: integer| | type: float| | type: id|X| type: 1-dim array | | type: n-dim array| | type: array (with size)|X| type: array (without size)    functions: calls    --------------------------------------|X| free function call| | member function call| | parameters:0| | parameters:1|X| parameters:n|X| array parameter - 1-dim| | array parameter - n-dim| | array parameter - with size| | array parameter - without size| | function call as statement| | function call as expression factor| | expression as parameter    variable declaration    --------------------------------------|X| type: integer| | type: float| | type: string| | type: id|X| type: 1-dim array | | type: n-dim array|X| type: array (with size)| | type: array (without size) (not allowed)    function body: local variable declarations    --------------------------------------| | no local variable declarations|X| local variable declarations| | intertwined statements and variable declarations    function body: statements    --------------------------------------| | no statement| | 1 statement|X| n statements|X| if statement|X| if: empty then or else blocks| | if: 1-statement then or else blocks|X| if: n-statements then or else blocks|X| while statement| | while: empty block| | while: 1-statement block|X| while: n-statement block| | read(<variable>) statement|X| write(<expr>) statement|X| return(<expr>) statement|X| assignment statement    variable + idnest    --------------------------------------|X| id| | id.id| | id.id(id)| | id(id).id| | id(id).id()| | id.id[id]| | id[id].id| | id[id].id[id]| | id.id[id][id]| | id[id][id].id| | id[id][id].id[id][id]| | id(id).id[id]| | id(id).id[id][id]| | expression as array index    expressions    --------------------------------------|X| single variable|X| involving addop| | involving multop|X| involving relop| | involving addop + multop|X| involving multop + relop| | involving addop + multop + relop| | involving parentheses| | involving nested parentheses| | involving not| | involving sign|X| involving literals| | involving variable + idnest|X| involving function calls| | involving all the above in one expression*, 65], 